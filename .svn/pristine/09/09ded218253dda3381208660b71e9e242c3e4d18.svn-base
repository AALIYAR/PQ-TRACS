package com.pq.tracs.model.bo;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CategoryImpl extends TracsBaseEntity {
    public static final int PARENTCATEGORYVALUE = 14;
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(CategoryImpl obj) {
                return obj.getId();
            }

            public void put(CategoryImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        Name {
            public Object get(CategoryImpl obj) {
                return obj.getName();
            }

            public void put(CategoryImpl obj, Object value) {
                obj.setName((String)value);
            }
        }
        ,
        Type {
            public Object get(CategoryImpl obj) {
                return obj.getType();
            }

            public void put(CategoryImpl obj, Object value) {
                obj.setType((String)value);
            }
        }
        ,
        SingularFlag {
            public Object get(CategoryImpl obj) {
                return obj.getSingularFlag();
            }

            public void put(CategoryImpl obj, Object value) {
                obj.setSingularFlag((String)value);
            }
        }
        ,
        ParentCategoryId {
            public Object get(CategoryImpl obj) {
                return obj.getParentCategoryId();
            }

            public void put(CategoryImpl obj, Object value) {
                obj.setParentCategoryId((Number)value);
            }
        }
        ,
        ParentValueId {
            public Object get(CategoryImpl obj) {
                return obj.getParentValueId();
            }

            public void put(CategoryImpl obj, Object value) {
                obj.setParentValueId((Number)value);
            }
        }
        ,
        CreatedBy {
            public Object get(CategoryImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(CategoryImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CreatedDate {
            public Object get(CategoryImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(CategoryImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(CategoryImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(CategoryImpl obj, Object value) {
                obj.setLastUpdatedBy((String)value);
            }
        }
        ,
        LastUpdatedDate {
            public Object get(CategoryImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(CategoryImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ActiveFlag {
            public Object get(CategoryImpl obj) {
                return obj.getActiveFlag();
            }

            public void put(CategoryImpl obj, Object value) {
                obj.setActiveFlag((String)value);
            }
        }
        ,
        FullOrPartialFlag {
            public Object get(CategoryImpl obj) {
                return obj.getFullOrPartialFlag();
            }

            public void put(CategoryImpl obj, Object value) {
                obj.setFullOrPartialFlag((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CategoryImpl object);

        public abstract void put(CategoryImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int ID = AttributesEnum.Id.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int TYPE = AttributesEnum.Type.index();
    public static final int SINGULARFLAG = AttributesEnum.SingularFlag.index();
    public static final int PARENTCATEGORYID = AttributesEnum.ParentCategoryId.index();
    public static final int PARENTVALUEID = AttributesEnum.ParentValueId.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int ACTIVEFLAG = AttributesEnum.ActiveFlag.index();
    public static final int FULLORPARTIALFLAG = AttributesEnum.FullOrPartialFlag.index();

    /**This is the default constructor (do not remove)
     */
    public CategoryImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.pq.tracs.model.bo.Category");
        }
        return mDefinitionObject;
    }

    /**Gets the attribute value for Id, using the alias name Id
     */
    public Number getId() {
        // Add any custom logic you wish to perform in this getter here.
        return (Number)getAttributeInternal(ID);
    }

    /**Sets <code>value</code> as the attribute value for Id
     */
    public void setId(Number value) {
        // Add custom validation or business logic for this setter here.
        setAttributeInternal(ID, value);
    }

    /**Gets the attribute value for Name, using the alias name Name
     */
    public String getName() {
        // Add any custom logic you wish to perform in this getter here.
        return (String)getAttributeInternal(NAME);
    }

    /**Sets <code>value</code> as the attribute value for Name
     */
    public void setName(String value) {
        // Add custom validation or business logic for this setter here.
        setAttributeInternal(NAME, value);
    }

    /**Gets the attribute value for Type, using the alias name Type
     */
    public String getType() {
        // Add any custom logic you wish to perform in this getter here.
        return (String)getAttributeInternal(TYPE);
    }

    /**Sets <code>value</code> as the attribute value for Type
     */
    public void setType(String value) {
        // Add custom validation or business logic for this setter here.
        setAttributeInternal(TYPE, value);
    }

    /**Gets the attribute value for SingularFlag, using the alias name SingularFlag
     */
    public String getSingularFlag() {
        // Add any custom logic you wish to perform in this getter here.
        return (String)getAttributeInternal(SINGULARFLAG);
    }

    /**Sets <code>value</code> as the attribute value for SingularFlag
     */
    public void setSingularFlag(String value) {
        // Add custom validation or business logic for this setter here.
        setAttributeInternal(SINGULARFLAG, value);
    }

    /**Gets the attribute value for ParentCategoryId, using the alias name ParentCategoryId
     */
    public Number getParentCategoryId() {
        // Add any custom logic you wish to perform in this getter here.
        return (Number)getAttributeInternal(PARENTCATEGORYID);
    }

    /**Sets <code>value</code> as the attribute value for ParentCategoryId
     */
    public void setParentCategoryId(Number value) {
        // Add custom validation or business logic for this setter here.
        setAttributeInternal(PARENTCATEGORYID, value);
    }

    /**Gets the attribute value for ParentValueId, using the alias name ParentValueId
     */
    public Number getParentValueId() {
        // Add any custom logic you wish to perform in this getter here.
        return (Number)getAttributeInternal(PARENTVALUEID);
    }

    /**Sets <code>value</code> as the attribute value for ParentValueId
     */
    public void setParentValueId(Number value) {
        // Add custom validation or business logic for this setter here.
        setAttributeInternal(PARENTVALUEID, value);
    }

    /**Gets the attribute value for CreatedBy, using the alias name CreatedBy
     */
    public String getCreatedBy() {
        // Add any custom logic you wish to perform in this getter here.
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**Gets the attribute value for CreatedDate, using the alias name CreatedDate
     */
    public Date getCreatedDate() {
        // Add any custom logic you wish to perform in this getter here.
        return (Date)getAttributeInternal(CREATEDDATE);
    }

    /**Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        // Add any custom logic you wish to perform in this getter here.
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }

    /**Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        // Add any custom logic you wish to perform in this getter here.
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }

    /**getAttrInvokeAccessor: generated method. Do not modify.
     */
    protected Object getAttrInvokeAccessor(int index, 
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**setAttrInvokeAccessor: generated method. Do not modify.
     */
    protected void setAttrInvokeAccessor(int index, Object value, 
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    /**Sets <code>value</code> as the attribute value for LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        // Add custom validation or business logic for this setter here.
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**Gets the attribute value for ActiveFlag, using the alias name ActiveFlag
     */
    public String getActiveFlag() {
        return (String)getAttributeInternal(ACTIVEFLAG);
    }

    /**Sets <code>value</code> as the attribute value for ActiveFlag
     */
    public void setActiveFlag(String value) {
        setAttributeInternal(ACTIVEFLAG, value);
    }

    /**Gets the attribute value for FullOrPartialFlag, using the alias name FullOrPartialFlag
     */
    public String getFullOrPartialFlag() {
        return (String)getAttributeInternal(FULLORPARTIALFLAG);
    }

    /**Sets <code>value</code> as the attribute value for FullOrPartialFlag
     */
    public void setFullOrPartialFlag(String value) {
        setAttributeInternal(FULLORPARTIALFLAG, value);
    }


    /**Gets the associated entity CategoryValueImpl
     */
    public CategoryValueImpl getParentCategoryValue() {
        return (CategoryValueImpl)getAttributeInternal(PARENTCATEGORYVALUE);
    }

    /**Sets <code>value</code> as the associated entity CategoryValueImpl
     */
    public void setParentCategoryValue(CategoryValueImpl value) {
        setAttributeInternal(PARENTCATEGORYVALUE, value);
    }


}
