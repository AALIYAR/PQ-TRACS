package com.pq.tracs.model.bo;

import java.sql.PreparedStatement;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContractTitleImpl extends TracsBaseEntity {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(ContractTitleImpl obj) {
                return obj.getId();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        ContractId {
            public Object get(ContractTitleImpl obj) {
                return obj.getContractId();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setContractId((Number)value);
            }
        }
        ,
        TitleId {
            public Object get(ContractTitleImpl obj) {
                return obj.getTitleId();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setTitleId((Number)value);
            }
        }
        ,
        CreatedBy {
            public Object get(ContractTitleImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CreatedDate {
            public Object get(ContractTitleImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(ContractTitleImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setLastUpdatedBy((String)value);
            }
        }
        ,
        LastUpdatedDate {
            public Object get(ContractTitleImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        EffectiveDate {
            public Object get(ContractTitleImpl obj) {
                return obj.getEffectiveDate();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setEffectiveDate((Date)value);
            }
        }
        ,
        ExpiresDate {
            public Object get(ContractTitleImpl obj) {
                return obj.getExpiresDate();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setExpiresDate((Date)value);
            }
        }
        ,
        Status {
            public Object get(ContractTitleImpl obj) {
                return obj.getStatus();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        }
        ,
        SubStatus {
            public Object get(ContractTitleImpl obj) {
                return obj.getSubStatus();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setSubStatus((String)value);
            }
        }
        ,
        BackfileFromDate {
            public Object get(ContractTitleImpl obj) {
                return obj.getBackfileFromDate();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setBackfileFromDate((Date)value);
            }
        }
        ,
        BackfileToDate {
            public Object get(ContractTitleImpl obj) {
                return obj.getBackfileToDate();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setBackfileToDate((Date)value);
            }
        }
        ,
        BackfileViaEfeedFlag {
            public Object get(ContractTitleImpl obj) {
                return obj.getBackfileViaEfeedFlag();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setBackfileViaEfeedFlag((String)value);
            }
        }
        ,
        EfeedDateAvailable {
            public Object get(ContractTitleImpl obj) {
                return obj.getEfeedDateAvailable();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setEfeedDateAvailable((Date)value);
            }
        }
        ,
        EfeedFlag {
            public Object get(ContractTitleImpl obj) {
                return obj.getEfeedFlag();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setEfeedFlag((String)value);
            }
        }
        ,
        EfeedProtocolChangeDays {
            public Object get(ContractTitleImpl obj) {
                return obj.getEfeedProtocolChangeDays();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setEfeedProtocolChangeDays((Number)value);
            }
        }
        ,
        ExceptionFlag {
            public Object get(ContractTitleImpl obj) {
                return obj.getExceptionFlag();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setExceptionFlag((String)value);
            }
        }
        ,
        Exclusivity {
            public Object get(ContractTitleImpl obj) {
                return obj.getExclusivity();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setExclusivity((String)value);
            }
        }
        ,
        RemovalDate {
            public Object get(ContractTitleImpl obj) {
                return obj.getRemovalDate();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setRemovalDate((Date)value);
            }
        }
        ,
        RightsToBeRetained {
            public Object get(ContractTitleImpl obj) {
                return obj.getRightsToBeRetained();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setRightsToBeRetained((String)value);
            }
        }
        ,
        VolumeYearEnd {
            public Object get(ContractTitleImpl obj) {
                return obj.getVolumeYearEnd();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setVolumeYearEnd((String)value);
            }
        }
        ,
        VolumeYearStart {
            public Object get(ContractTitleImpl obj) {
                return obj.getVolumeYearStart();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setVolumeYearStart((String)value);
            }
        }
        ,
        Contract {
            public Object get(ContractTitleImpl obj) {
                return obj.getContract();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setContract((ContractImpl)value);
            }
        }
        ,
        Title {
            public Object get(ContractTitleImpl obj) {
                return obj.getTitle();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setTitle((TitleImpl)value);
            }
        }
        ,
        JTraxTitleContractRight {
            public Object get(ContractTitleImpl obj) {
                return obj.getJTraxTitleContractRight();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TitleRoyaltyRate {
            public Object get(ContractTitleImpl obj) {
                return obj.getTitleRoyaltyRate();
            }

            public void put(ContractTitleImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ContractTitleImpl object);

        public abstract void put(ContractTitleImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int CONTRACTID = AttributesEnum.ContractId.index();
    public static final int TITLEID = AttributesEnum.TitleId.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int EFFECTIVEDATE = AttributesEnum.EffectiveDate.index();
    public static final int EXPIRESDATE = AttributesEnum.ExpiresDate.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int SUBSTATUS = AttributesEnum.SubStatus.index();
    public static final int BACKFILEFROMDATE = AttributesEnum.BackfileFromDate.index();
    public static final int BACKFILETODATE = AttributesEnum.BackfileToDate.index();
    public static final int BACKFILEVIAEFEEDFLAG = AttributesEnum.BackfileViaEfeedFlag.index();
    public static final int EFEEDDATEAVAILABLE = AttributesEnum.EfeedDateAvailable.index();
    public static final int EFEEDFLAG = AttributesEnum.EfeedFlag.index();
    public static final int EFEEDPROTOCOLCHANGEDAYS = AttributesEnum.EfeedProtocolChangeDays.index();
    public static final int EXCEPTIONFLAG = AttributesEnum.ExceptionFlag.index();
    public static final int EXCLUSIVITY = AttributesEnum.Exclusivity.index();
    public static final int REMOVALDATE = AttributesEnum.RemovalDate.index();
    public static final int RIGHTSTOBERETAINED = AttributesEnum.RightsToBeRetained.index();
    public static final int VOLUMEYEAREND = AttributesEnum.VolumeYearEnd.index();
    public static final int VOLUMEYEARSTART = AttributesEnum.VolumeYearStart.index();
    public static final int CONTRACT = AttributesEnum.Contract.index();
    public static final int TITLE = AttributesEnum.Title.index();
    public static final int JTRAXTITLECONTRACTRIGHT = AttributesEnum.JTraxTitleContractRight.index();
    public static final int TITLEROYALTYRATE = AttributesEnum.TitleRoyaltyRate.index();

    /**This is the default constructor (do not remove)
     */
    public ContractTitleImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.pq.tracs.model.bo.ContractTitle");
        }
        return mDefinitionObject;
    }

    /**Gets the attribute value for Id, using the alias name Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**Sets <code>value</code> as the attribute value for Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**Gets the attribute value for ContractId, using the alias name ContractId
     */
    public Number getContractId() {
        return (Number)getAttributeInternal(CONTRACTID);
    }

    /**Sets <code>value</code> as the attribute value for ContractId
     */
    public void setContractId(Number value) {
        setAttributeInternal(CONTRACTID, value);
    }

    /**Gets the attribute value for TitleId, using the alias name TitleId
     */
    public Number getTitleId() {
        return (Number)getAttributeInternal(TITLEID);
    }

    /**Sets <code>value</code> as the attribute value for TitleId
     */
    public void setTitleId(Number value) {
        setAttributeInternal(TITLEID, value);
    }

    /**Gets the attribute value for CreatedBy, using the alias name CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }


    /**Gets the attribute value for CreatedDate, using the alias name CreatedDate
     */
    public Date getCreatedDate() {
        return (Date)getAttributeInternal(CREATEDDATE);
    }

    /**Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }

    /**getAttrInvokeAccessor: generated method. Do not modify.
     */
    protected Object getAttrInvokeAccessor(int index, 
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**setAttrInvokeAccessor: generated method. Do not modify.
     */
    protected void setAttrInvokeAccessor(int index, Object value, 
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**Gets the associated entity ContractImpl
     */
    public ContractImpl getContract() {
        return (ContractImpl)getAttributeInternal(CONTRACT);
    }

    /**Sets <code>value</code> as the associated entity ContractImpl
     */
    public void setContract(ContractImpl value) {
        setAttributeInternal(CONTRACT, value);
    }

    /**Gets the associated entity TitleImpl
     */
    public TitleImpl getTitle() {
        return (TitleImpl)getAttributeInternal(TITLE);
    }

    /**Sets <code>value</code> as the associated entity TitleImpl
     */
    public void setTitle(TitleImpl value) {
        setAttributeInternal(TITLE, value);
    }

    /**Add attribute defaulting logic in this method.
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        
        this.setEffectiveDate(this.getContract().getEffectiveDate());
        this.setExclusivity(this.getContract().getExclusivity());
        this.setRightsToBeRetained(this.getContract().getRightsToBeRetained());
    }

    /**Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**Add Entity validation code in this method.
     */
    protected void validateEntity() {
        super.validateEntity();
    }

    /**Add locking logic here.
     */
    public void lock() {
        super.lock();
    } 
    
    protected void prepareForDML(int operation, TransactionEvent e) {
        super.prepareForDML(operation, e);
        
    }

    /**Custom DML update/insert/delete logic here.
     */
    protected void doDML(int operation, TransactionEvent e) {
     
     if(operation == DML_DELETE)  {
         PreparedStatement pstmt = null;
         PreparedStatement pstmt1 = null;
         PreparedStatement pstmt2 = null;
         
         try{
         
            pstmt = getDBTransaction().createPreparedStatement("delete from TRAX_TITLE_CONTRACT_RIGHT where title_id=? AND CONTRACT_RIGHT_ID in(select id from trax_contract_right where contract_id=?)",1);
            pstmt1 = getDBTransaction().createPreparedStatement("delete from TRAX_TITLE_CONTRACT_GUARANTEE where title_id=? AND CONTRACT_GUARANTEE_ID in(select id from trax_contract_guarantee where contract_id=?)",1);
            pstmt2 = getDBTransaction().createPreparedStatement("delete from TRAX_TITLE_ROYALTY_RATE where title_id=? AND ROYALTY_RATE_ID in(select id from trax_royalty_rate where contract_id=?)",1);
            
            pstmt.setInt(1,getTitleId().intValue());
            pstmt.setInt(2,getContractId().intValue());
            pstmt.executeUpdate();
            
            pstmt1.setInt(1,getTitleId().intValue());
            pstmt1.setInt(2,getContractId().intValue());
            pstmt1.executeUpdate();
            
            pstmt2.setInt(1,getTitleId().intValue());
            pstmt2.setInt(2,getContractId().intValue());
            pstmt2.executeUpdate();
            
         }catch(Exception ee){
            ee.printStackTrace();
         }
         finally{
             try{
                 if(pstmt!=null) pstmt.close();
             }catch(Exception eeee){}
             try{
                 if(pstmt1!=null) pstmt1.close();
             }catch(Exception eeee){}
             try{
                 if(pstmt2!=null) pstmt2.close();
             }catch(Exception eeee){}
         }
         
     }
       
    /*String userId=getLoginUserId();
        if(operation==DML_INSERT){
            SequenceImpl seqId = new SequenceImpl("TRAX_CONTRACT_TITLE_ID_SEQ", getDBTransaction());
            Number id=seqId.getSequenceNumber();
            setAttributeInternal(ID, id);
           
            this.setAttribute(CREATEDDATE, (Date)Date.getCurrentDate());
            this.setAttribute(LASTUPDATEDDATE, (Date)Date.getCurrentDate());
            
            if (userId != null) {
                this.setAttribute(CREATEDBY, userId);
                this.setAttribute(LASTUPDATEDBY, userId);
            }
            
        }else if(operation==DML_UPDATE){
            this.setAttribute(LASTUPDATEDDATE, (Date)Date.getCurrentDate());
            
            if (userId != null) {
                this.setAttribute(LASTUPDATEDBY, userId);
            }
        }*/
        //->Sudhir
        super.doDML(operation, e);
    }


    /**Validation method for ContractTitle
     */
    public boolean validateContractTitle() {

     return true;
 }

    /**Gets the associated entity oracle.jbo.RowIterator
     */
    public RowIterator getJTraxTitleContractRight() {
        return (RowIterator)getAttributeInternal(JTRAXTITLECONTRACTRIGHT);
    }

    /**Gets the attribute value for EffectiveDate, using the alias name EffectiveDate
     */
    public Date getEffectiveDate() {
        return (Date)getAttributeInternal(EFFECTIVEDATE);
    }

    /**Sets <code>value</code> as the attribute value for EffectiveDate
     */
    public void setEffectiveDate(Date value) {
        setAttributeInternal(EFFECTIVEDATE, value);
    }

    /**Gets the attribute value for ExpiresDate, using the alias name ExpiresDate
     */
    public Date getExpiresDate() {
        return (Date)getAttributeInternal(EXPIRESDATE);
    }

    /**Sets <code>value</code> as the attribute value for ExpiresDate
     */
    public void setExpiresDate(Date value) {
        setAttributeInternal(EXPIRESDATE, value);
    }

    /**Gets the attribute value for Status, using the alias name Status
     */
    public String getStatus() {
        return (String)getAttributeInternal(STATUS);
    }

    /**Sets <code>value</code> as the attribute value for Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**Gets the attribute value for SubStatus, using the alias name SubStatus
     */
    public String getSubStatus() {
        return (String)getAttributeInternal(SUBSTATUS);
    }

    /**Sets <code>value</code> as the attribute value for SubStatus
     */
    public void setSubStatus(String value) {
        setAttributeInternal(SUBSTATUS, value);
    }

    /**Gets the attribute value for BackfileFromDate, using the alias name BackfileFromDate
     */
    public Date getBackfileFromDate() {
        return (Date)getAttributeInternal(BACKFILEFROMDATE);
    }

    /**Sets <code>value</code> as the attribute value for BackfileFromDate
     */
    public void setBackfileFromDate(Date value) {
        setAttributeInternal(BACKFILEFROMDATE, value);
    }

    /**Gets the attribute value for BackfileToDate, using the alias name BackfileToDate
     */
    public Date getBackfileToDate() {
        return (Date)getAttributeInternal(BACKFILETODATE);
    }

    /**Sets <code>value</code> as the attribute value for BackfileToDate
     */
    public void setBackfileToDate(Date value) {
        setAttributeInternal(BACKFILETODATE, value);
    }

    /**Gets the attribute value for BackfileViaEfeedFlag, using the alias name BackfileViaEfeedFlag
     */
    public String getBackfileViaEfeedFlag() {
        return (String)getAttributeInternal(BACKFILEVIAEFEEDFLAG);
    }

    /**Sets <code>value</code> as the attribute value for BackfileViaEfeedFlag
     */
    public void setBackfileViaEfeedFlag(String value) {
        setAttributeInternal(BACKFILEVIAEFEEDFLAG, value);
    }

    /**Gets the attribute value for EfeedDateAvailable, using the alias name EfeedDateAvailable
     */
    public Date getEfeedDateAvailable() {
        return (Date)getAttributeInternal(EFEEDDATEAVAILABLE);
    }

    /**Sets <code>value</code> as the attribute value for EfeedDateAvailable
     */
    public void setEfeedDateAvailable(Date value) {
        setAttributeInternal(EFEEDDATEAVAILABLE, value);
    }

    /**Gets the attribute value for EfeedFlag, using the alias name EfeedFlag
     */
    public String getEfeedFlag() {
        return (String)getAttributeInternal(EFEEDFLAG);
    }

    /**Sets <code>value</code> as the attribute value for EfeedFlag
     */
    public void setEfeedFlag(String value) {
        setAttributeInternal(EFEEDFLAG, value);
    }

    /**Gets the attribute value for EfeedProtocolChangeDays, using the alias name EfeedProtocolChangeDays
     */
    public Number getEfeedProtocolChangeDays() {
        return (Number)getAttributeInternal(EFEEDPROTOCOLCHANGEDAYS);
    }

    /**Sets <code>value</code> as the attribute value for EfeedProtocolChangeDays
     */
    public void setEfeedProtocolChangeDays(Number value) {
        setAttributeInternal(EFEEDPROTOCOLCHANGEDAYS, value);
    }

    /**Gets the attribute value for ExceptionFlag, using the alias name ExceptionFlag
     */
    public String getExceptionFlag() {
        return (String)getAttributeInternal(EXCEPTIONFLAG);
    }

    /**Sets <code>value</code> as the attribute value for ExceptionFlag
     */
    public void setExceptionFlag(String value) {
        setAttributeInternal(EXCEPTIONFLAG, value);
    }

    /**Gets the attribute value for Exclusivity, using the alias name Exclusivity
     */
    public String getExclusivity() {
        return (String)getAttributeInternal(EXCLUSIVITY);
    }

    /**Sets <code>value</code> as the attribute value for Exclusivity
     */
    public void setExclusivity(String value) {
        setAttributeInternal(EXCLUSIVITY, value);
    }

    /**Gets the attribute value for RemovalDate, using the alias name RemovalDate
     */
    public Date getRemovalDate() {
        return (Date)getAttributeInternal(REMOVALDATE);
    }

    /**Sets <code>value</code> as the attribute value for RemovalDate
     */
    public void setRemovalDate(Date value) {
        setAttributeInternal(REMOVALDATE, value);
    }

    /**Gets the attribute value for RightsToBeRetained, using the alias name RightsToBeRetained
     */
    public String getRightsToBeRetained() {
        return (String)getAttributeInternal(RIGHTSTOBERETAINED);
    }

    /**Sets <code>value</code> as the attribute value for RightsToBeRetained
     */
    public void setRightsToBeRetained(String value) {
        setAttributeInternal(RIGHTSTOBERETAINED, value);
    }

    /**Gets the attribute value for VolumeYearEnd, using the alias name VolumeYearEnd
     */
    public String getVolumeYearEnd() {
        return (String)getAttributeInternal(VOLUMEYEAREND);
    }

    /**Sets <code>value</code> as the attribute value for VolumeYearEnd
     */
    public void setVolumeYearEnd(String value) {
        setAttributeInternal(VOLUMEYEAREND, value);
    }

    /**Gets the attribute value for VolumeYearStart, using the alias name VolumeYearStart
     */
    public String getVolumeYearStart() {
        return (String)getAttributeInternal(VOLUMEYEARSTART);
    }

    /**Sets <code>value</code> as the attribute value for VolumeYearStart
     */
    public void setVolumeYearStart(String value) {
        setAttributeInternal(VOLUMEYEARSTART, value);
    }

    /**Gets the associated entity oracle.jbo.RowIterator
     */
    public RowIterator getTitleRoyaltyRate() {
        return (RowIterator)getAttributeInternal(TITLEROYALTYRATE);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }


}
