package com.pq.tracs.model.security.bo;

import com.pq.tracs.model.bo.TracsBaseEntity;
import com.pq.tracs.model.security.dao.ExUserChangeDetailsViewRowImpl;

import com.pq.tracs.util.DESEncrypter;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;

import oracle.jbo.server.TransactionEvent;

import oracle.jheadstart.model.adfbc.security.entity.UserImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ExUsersImpl extends UserImpl {
    private static EntityDefImpl mDefinitionObject;
    
    private DESEncrypter encrpter = new DESEncrypter();

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(ExUsersImpl obj) {
                return obj.getId();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        EmailAddress {
            public Object get(ExUsersImpl obj) {
                return obj.getEmailAddress();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setEmailAddress((String)value);
            }
        }
        ,
        Username {
            public Object get(ExUsersImpl obj) {
                return obj.getUsername();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setUsername((String)value);
            }
        }
        ,
        OrgKey {
            public Object get(ExUsersImpl obj) {
                return obj.getOrgKey();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setOrgKey((String)value);
            }
        }
        ,
        Password {
            public Object get(ExUsersImpl obj) {
                return obj.getPassword();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setPassword((String)value);
            }
        }
        ,
        DisplayName {
            public Object get(ExUsersImpl obj) {
                return obj.getDisplayName();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setDisplayName((String)value);
            }
        }
        ,
        Locale {
            public Object get(ExUsersImpl obj) {
                return obj.getLocale();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setLocale((String)value);
            }
        }
        ,
        FirstName {
            public Object get(ExUsersImpl obj) {
                return obj.getFirstName();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setFirstName((String)value);
            }
        }
        ,
        LastName {
            public Object get(ExUsersImpl obj) {
                return obj.getLastName();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setLastName((String)value);
            }
        }
        ,
        MiddleName {
            public Object get(ExUsersImpl obj) {
                return obj.getMiddleName();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setMiddleName((String)value);
            }
        }
        ,
        Alias {
            public Object get(ExUsersImpl obj) {
                return obj.getAlias();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setAlias((String)value);
            }
        }
        ,
        JobTitle {
            public Object get(ExUsersImpl obj) {
                return obj.getJobTitle();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setJobTitle((String)value);
            }
        }
        ,
        WorkPhone {
            public Object get(ExUsersImpl obj) {
                return obj.getWorkPhone();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setWorkPhone((String)value);
            }
        }
        ,
        HomePhone {
            public Object get(ExUsersImpl obj) {
                return obj.getHomePhone();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setHomePhone((String)value);
            }
        }
        ,
        Fax {
            public Object get(ExUsersImpl obj) {
                return obj.getFax();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setFax((String)value);
            }
        }
        ,
        PoApproved {
            public Object get(ExUsersImpl obj) {
                return obj.getPoApproved();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setPoApproved((String)value);
            }
        }
        ,
        UserType {
            public Object get(ExUsersImpl obj) {
                return obj.getUserType();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setUserType((String)value);
            }
        }
        ,
        AuctionPrivilege {
            public Object get(ExUsersImpl obj) {
                return obj.getAuctionPrivilege();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setAuctionPrivilege((String)value);
            }
        }
        ,
        Encrypted {
            public Object get(ExUsersImpl obj) {
                return obj.getEncrypted();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setEncrypted((String)value);
            }
        }
        ,
        NewPassword {
            public Object get(ExUsersImpl obj) {
                return obj.getNewPassword();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setNewPassword((String)value);
            }
        }
        ,
        CurrentPassword {
            public Object get(ExUsersImpl obj) {
                return obj.getCurrentPassword();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setCurrentPassword((String)value);
            }
        }
        ,
        ReTypePassword {
            public Object get(ExUsersImpl obj) {
                return obj.getReTypePassword();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setReTypePassword((String)value);
            }
        }
        ,
        LastLoginTime {
            public Object get(ExUsersImpl obj) {
                return obj.getLastLoginTime();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setLastLoginTime((Date)value);
            }
        }
        ,
        LastLoginApp {
            public Object get(ExUsersImpl obj) {
                return obj.getLastLoginApp();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setLastLoginApp((String)value);
            }
        }
        ,
        ExUserRoleGrants {
            public Object get(ExUsersImpl obj) {
                return obj.getExUserRoleGrants();
            }

            public void put(ExUsersImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ExUsersImpl object);

        public abstract void put(ExUsersImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int EMAILADDRESS = AttributesEnum.EmailAddress.index();
    public static final int USERNAME = AttributesEnum.Username.index();
    public static final int ORGKEY = AttributesEnum.OrgKey.index();
    public static final int PASSWORD = AttributesEnum.Password.index();
    public static final int DISPLAYNAME = AttributesEnum.DisplayName.index();
    public static final int LOCALE = AttributesEnum.Locale.index();
    public static final int FIRSTNAME = AttributesEnum.FirstName.index();
    public static final int LASTNAME = AttributesEnum.LastName.index();
    public static final int MIDDLENAME = AttributesEnum.MiddleName.index();
    public static final int ALIAS = AttributesEnum.Alias.index();
    public static final int JOBTITLE = AttributesEnum.JobTitle.index();
    public static final int WORKPHONE = AttributesEnum.WorkPhone.index();
    public static final int HOMEPHONE = AttributesEnum.HomePhone.index();
    public static final int FAX = AttributesEnum.Fax.index();
    public static final int POAPPROVED = AttributesEnum.PoApproved.index();
    public static final int USERTYPE = AttributesEnum.UserType.index();
    public static final int AUCTIONPRIVILEGE = AttributesEnum.AuctionPrivilege.index();
    public static final int ENCRYPTED = AttributesEnum.Encrypted.index();
    public static final int NEWPASSWORD = AttributesEnum.NewPassword.index();
    public static final int CURRENTPASSWORD = AttributesEnum.CurrentPassword.index();
    public static final int RETYPEPASSWORD = AttributesEnum.ReTypePassword.index();
    public static final int LASTLOGINTIME = AttributesEnum.LastLoginTime.index();
    public static final int LASTLOGINAPP = AttributesEnum.LastLoginApp.index();
    public static final int EXUSERROLEGRANTS = AttributesEnum.ExUserRoleGrants.index();

    /**This is the default constructor (do not remove)
     */
    public ExUsersImpl() {
    }


    /* protected void create(AttributeList attributeList)
    {
      super.create(attributeList);

      setEncrypted("N");

    }*/


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.pq.tracs.model.security.bo.ExUsers");
        }
        return mDefinitionObject;
    }

    /**Gets the attribute value for Id, using the alias name Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**Sets <code>value</code> as the attribute value for Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**Gets the attribute value for EmailAddress, using the alias name EmailAddress
     */
    public String getEmailAddress() {
        return (String)getAttributeInternal(EMAILADDRESS);
    }

    /**Sets <code>value</code> as the attribute value for EmailAddress
     */
    public void setEmailAddress(String value) {
        setAttributeInternal(EMAILADDRESS, value);
    }

    /**Gets the attribute value for Username, using the alias name Username
     */
    public String getUsername() {
        return (String)getAttributeInternal(USERNAME);
    }

    /**Sets <code>value</code> as the attribute value for Username
     */
    public void setUsername(String value) {
        if(value!=null){
            if(value.indexOf(" ")>0)
                throw new JboException("User name does not allow spaces");
            
            value = value.toUpperCase();
        }
        setAttributeInternal(USERNAME, value);
    }

    /**Gets the attribute value for OrgKey, using the alias name OrgKey
     */
    public String getOrgKey() {
        return (String)getAttributeInternal(ORGKEY);
    }

    /**Sets <code>value</code> as the attribute value for OrgKey
     */
    public void setOrgKey(String value) {
        setAttributeInternal(ORGKEY, value);
    }

    /**Gets the attribute value for Password, using the alias name Password
     */
    public String getPassword() {
    
    
        String s = (String)getAttributeInternal(PASSWORD);
        
        try{
            if(s!=null)
                s = encrpter.decrypt(s);
                
        }catch(Exception ee){}
        
        return s;
    }

    /**Sets <code>value</code> as the attribute value for Password
     */
    public void setPassword(String value) {   

        if(value!=null){
            try{
                value = encrpter.encrypt(value);
            }catch(Exception eee){}
        }
        
        setAttributeInternal(PASSWORD, value);
    }

    /**Gets the attribute value for DisplayName, using the alias name DisplayName
     */
    public String getDisplayName() {
        return (String)getAttributeInternal(DISPLAYNAME);
    }

    /**Sets <code>value</code> as the attribute value for DisplayName
     */
    public void setDisplayName(String value) {
        setAttributeInternal(DISPLAYNAME, value);
    }

    /**Gets the attribute value for Locale, using the alias name Locale
     */
    public String getLocale() {
        return (String)getAttributeInternal(LOCALE);
    }

    /**Sets <code>value</code> as the attribute value for Locale
     */
    public void setLocale(String value) {
        setAttributeInternal(LOCALE, value);
    }

    /**Gets the attribute value for FirstName, using the alias name FirstName
     */
    public String getFirstName() {
        return (String)getAttributeInternal(FIRSTNAME);
    }

    /**Sets <code>value</code> as the attribute value for FirstName
     */
    public void setFirstName(String value) {
        setAttributeInternal(FIRSTNAME, value);
    }

    /**Gets the attribute value for LastName, using the alias name LastName
     */
    public String getLastName() {
        return (String)getAttributeInternal(LASTNAME);
    }

    /**Sets <code>value</code> as the attribute value for LastName
     */
    public void setLastName(String value) {
        setAttributeInternal(LASTNAME, value);
    }

    /**Gets the attribute value for MiddleName, using the alias name MiddleName
     */
    public String getMiddleName() {
        return (String)getAttributeInternal(MIDDLENAME);
    }

    /**Sets <code>value</code> as the attribute value for MiddleName
     */
    public void setMiddleName(String value) {
        setAttributeInternal(MIDDLENAME, value);
    }

    /**Gets the attribute value for Alias, using the alias name Alias
     */
    public String getAlias() {
        return (String)getAttributeInternal(ALIAS);
    }

    /**Sets <code>value</code> as the attribute value for Alias
     */
    public void setAlias(String value) {
        setAttributeInternal(ALIAS, value);
    }

    /**Gets the attribute value for JobTitle, using the alias name JobTitle
     */
    public String getJobTitle() {
        return (String)getAttributeInternal(JOBTITLE);
    }

    /**Sets <code>value</code> as the attribute value for JobTitle
     */
    public void setJobTitle(String value) {
        setAttributeInternal(JOBTITLE, value);
    }

    /**Gets the attribute value for WorkPhone, using the alias name WorkPhone
     */
    public String getWorkPhone() {
        return (String)getAttributeInternal(WORKPHONE);
    }

    /**Sets <code>value</code> as the attribute value for WorkPhone
     */
    public void setWorkPhone(String value) {
        setAttributeInternal(WORKPHONE, value);
    }

    /**Gets the attribute value for HomePhone, using the alias name HomePhone
     */
    public String getHomePhone() {
        return (String)getAttributeInternal(HOMEPHONE);
    }

    /**Sets <code>value</code> as the attribute value for HomePhone
     */
    public void setHomePhone(String value) {
        setAttributeInternal(HOMEPHONE, value);
    }

    /**Gets the attribute value for Fax, using the alias name Fax
     */
    public String getFax() {
        return (String)getAttributeInternal(FAX);
    }

    /**Sets <code>value</code> as the attribute value for Fax
     */
    public void setFax(String value) {
        setAttributeInternal(FAX, value);
    }

    /**Gets the attribute value for PoApproved, using the alias name PoApproved
     */
    public String getPoApproved() {
        return (String)getAttributeInternal(POAPPROVED);
    }

    /**Sets <code>value</code> as the attribute value for PoApproved
     */
    public void setPoApproved(String value) {
        setAttributeInternal(POAPPROVED, value);
    }

    /**Gets the attribute value for UserType, using the alias name UserType
     */
    public String getUserType() {
        return (String)getAttributeInternal(USERTYPE);
    }

    /**Sets <code>value</code> as the attribute value for UserType
     */
    public void setUserType(String value) {
        setAttributeInternal(USERTYPE, value);
    }

    /**Gets the attribute value for AuctionPrivilege, using the alias name AuctionPrivilege
     */
    public String getAuctionPrivilege() {
        return (String)getAttributeInternal(AUCTIONPRIVILEGE);
    }

    /**Sets <code>value</code> as the attribute value for AuctionPrivilege
     */
    public void setAuctionPrivilege(String value) {
        setAttributeInternal(AUCTIONPRIVILEGE, value);
    }

    /**getAttrInvokeAccessor: generated method. Do not modify.
     */
    protected Object getAttrInvokeAccessor(int index, 
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**setAttrInvokeAccessor: generated method. Do not modify.
     */
    protected void setAttrInvokeAccessor(int index, Object value, 
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**Gets the associated entity oracle.jbo.RowIterator
     */
    public RowIterator getExUserRoleGrants() {
        return (RowIterator)getAttributeInternal(EXUSERROLEGRANTS);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    /**Gets the attribute value for Encrypted, using the alias name Encrypted
     */
    public String getEncrypted() {
        return (String)getAttributeInternal(ENCRYPTED);
    }

    /**Sets <code>value</code> as the attribute value for Encrypted
     */
    public void setEncrypted(String value) {
        setAttributeInternal(ENCRYPTED, value);
    }

    /**Gets the attribute value for NewPassword, using the alias name NewPassword
     */
    public String getNewPassword() {
        return (String)getAttributeInternal(NEWPASSWORD);
    }

    /**Sets <code>value</code> as the attribute value for NewPassword
     */
    public void setNewPassword(String value) {
        setAttributeInternal(NEWPASSWORD, value);
    }

    /**Gets the attribute value for CurrentPassword, using the alias name CurrentPassword
     */
    public String getCurrentPassword() {
        return (String)getAttributeInternal(CURRENTPASSWORD);
    }

    /**Sets <code>value</code> as the attribute value for CurrentPassword
     */
    public void setCurrentPassword(String value) {
        setAttributeInternal(CURRENTPASSWORD, value);
    }

    /**Gets the attribute value for ReTypePassword, using the alias name ReTypePassword
     */
    public String getReTypePassword() {
        return (String)getAttributeInternal(RETYPEPASSWORD);
    }

    /**Sets <code>value</code> as the attribute value for ReTypePassword
     */
    public void setReTypePassword(String value) {
        setAttributeInternal(RETYPEPASSWORD, value);
    }


    /**
     * Gets the attribute value for LastLoginTime, using the alias name LastLoginTime.
     * @return the LastLoginTime
     */
    public Date getLastLoginTime() {
        return (Date)getAttributeInternal(LASTLOGINTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastLoginTime.
     * @param value value to set the LastLoginTime
     */
    public void setLastLoginTime(Date value) {
        setAttributeInternal(LASTLOGINTIME, value);
    }

    /**
     * Gets the attribute value for LastLoginApp, using the alias name LastLoginApp.
     * @return the LastLoginApp
     */
    public String getLastLoginApp() {
        return (String)getAttributeInternal(LASTLOGINAPP);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastLoginApp.
     * @param value value to set the LastLoginApp
     */
    public void setLastLoginApp(String value) {
        setAttributeInternal(LASTLOGINAPP, value);
    }

    protected void validateEntity() {
        changePasswordValidation();
        super.validateEntity();
    }
    
    
    private void changePasswordValidation() {
    
        if(getNewPassword()!=null && getCurrentPassword()!=null && getReTypePassword()!=null){
            if(!getCurrentPassword().equals(getPassword()))
                throw new JboException("You entered wrong current password");
            
            if(!getNewPassword().equals(getReTypePassword()))
                throw new JboException("New password and Re-enter password do not match");
            
            if(getNewPassword().equals(getPassword()))
                throw new JboException("This is your current password, Please enter another new password");
            
            setPassword(getNewPassword());
            setCurrentPassword(null);
            setNewPassword(null);
            setReTypePassword(null);
          FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,"Successfully Changed Password",null));
        }
    }

}
