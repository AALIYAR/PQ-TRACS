package com.pq.tracs.model.eo;

import com.pq.tracs.model.bo.TracsBaseEntity;

import java.util.ArrayList;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 08 17:01:47 EDT 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TraxBlockingRuleDtlImpl extends TracsBaseEntity {
    private static EntityDefImpl mDefinitionObject;

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    @Override
    protected void validateEntity() {
        super.validateEntity();
      if (this.getTraxBlockingRuleHdr() != null ) {
          // if primary flag is set on this record, then mark the title as invalid so it will validat the primary flags
          //this.getTraxBlockingRuleHdr().setInvalid();
        this.getTraxBlockingRuleHdr().setInvalid();
      }
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(TraxBlockingRuleDtlImpl obj) {
                return obj.getId();
            }

            public void put(TraxBlockingRuleDtlImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        BlockingRuleHdrId {
            public Object get(TraxBlockingRuleDtlImpl obj) {
                return obj.getBlockingRuleHdrId();
            }

            public void put(TraxBlockingRuleDtlImpl obj, Object value) {
                obj.setBlockingRuleHdrId((Number)value);
            }
        }
        ,
        RelatedLineId {
            public Object get(TraxBlockingRuleDtlImpl obj) {
                return obj.getRelatedLineId();
            }

            public void put(TraxBlockingRuleDtlImpl obj, Object value) {
                obj.setRelatedLineId((Number)value);
            }
        }
        ,
        BlockingRuleType {
            public Object get(TraxBlockingRuleDtlImpl obj) {
                return obj.getBlockingRuleType();
            }

            public void put(TraxBlockingRuleDtlImpl obj, Object value) {
                obj.setBlockingRuleType((String)value);
            }
        }
        ,
        BlockingRuleValue {
            public Object get(TraxBlockingRuleDtlImpl obj) {
                return obj.getBlockingRuleValue();
            }

            public void put(TraxBlockingRuleDtlImpl obj, Object value) {
                obj.setBlockingRuleValue((String)value);
            }
        }
        ,
        ExcludeFlag {
            public Object get(TraxBlockingRuleDtlImpl obj) {
                return obj.getExcludeFlag();
            }

            public void put(TraxBlockingRuleDtlImpl obj, Object value) {
                obj.setExcludeFlag((String)value);
            }
        }
        ,
        CreatedBy {
            public Object get(TraxBlockingRuleDtlImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(TraxBlockingRuleDtlImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CreatedDate {
            public Object get(TraxBlockingRuleDtlImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(TraxBlockingRuleDtlImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(TraxBlockingRuleDtlImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(TraxBlockingRuleDtlImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastUpdatedDate {
            public Object get(TraxBlockingRuleDtlImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(TraxBlockingRuleDtlImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        BlockedFlag {
            public Object get(TraxBlockingRuleDtlImpl obj) {
                return obj.getBlockedFlag();
            }

            public void put(TraxBlockingRuleDtlImpl obj, Object value) {
                obj.setBlockedFlag((String)value);
            }
        }
        ,
        TraxBlockingRuleHdr {
            public Object get(TraxBlockingRuleDtlImpl obj) {
                return obj.getTraxBlockingRuleHdr();
            }

            public void put(TraxBlockingRuleDtlImpl obj, Object value) {
                obj.setTraxBlockingRuleHdr((TraxBlockingRuleHdrImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TraxBlockingRuleDtlImpl object);

        public abstract void put(TraxBlockingRuleDtlImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int BLOCKINGRULEHDRID = AttributesEnum.BlockingRuleHdrId.index();
    public static final int RELATEDLINEID = AttributesEnum.RelatedLineId.index();
    public static final int BLOCKINGRULETYPE = AttributesEnum.BlockingRuleType.index();
    public static final int BLOCKINGRULEVALUE = AttributesEnum.BlockingRuleValue.index();
    public static final int EXCLUDEFLAG = AttributesEnum.ExcludeFlag.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int BLOCKEDFLAG = AttributesEnum.BlockedFlag.index();
    public static final int TRAXBLOCKINGRULEHDR = AttributesEnum.TraxBlockingRuleHdr.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TraxBlockingRuleDtlImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.pq.tracs.model.eo.TraxBlockingRuleDtl");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for BlockingRuleHdrId, using the alias name BlockingRuleHdrId.
     * @return the BlockingRuleHdrId
     */
    public Number getBlockingRuleHdrId() {
        return (Number)getAttributeInternal(BLOCKINGRULEHDRID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BlockingRuleHdrId.
     * @param value value to set the BlockingRuleHdrId
     */
    public void setBlockingRuleHdrId(Number value) {
        setAttributeInternal(BLOCKINGRULEHDRID, value);
    }

    /**
     * Gets the attribute value for RelatedLineId, using the alias name RelatedLineId.
     * @return the RelatedLineId
     */
    public Number getRelatedLineId() {
        return (Number)getAttributeInternal(RELATEDLINEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RelatedLineId.
     * @param value value to set the RelatedLineId
     */
    public void setRelatedLineId(Number value) {
        setAttributeInternal(RELATEDLINEID, value);
    }

    /**
     * Gets the attribute value for BlockingRuleType, using the alias name BlockingRuleType.
     * @return the BlockingRuleType
     */
    public String getBlockingRuleType() {
        return (String)getAttributeInternal(BLOCKINGRULETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for BlockingRuleType.
     * @param value value to set the BlockingRuleType
     */
    public void setBlockingRuleType(String value) {
        setAttributeInternal(BLOCKINGRULETYPE, value);
    }

    /**
     * Gets the attribute value for BlockingRuleValue, using the alias name BlockingRuleValue.
     * @return the BlockingRuleValue
     */
    public String getBlockingRuleValue() {
        return (String)getAttributeInternal(BLOCKINGRULEVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for BlockingRuleValue.
     * @param value value to set the BlockingRuleValue
     */
    public void setBlockingRuleValue(String value) {
        setAttributeInternal(BLOCKINGRULEVALUE, value);
    }

    /**
     * Gets the attribute value for ExcludeFlag, using the alias name ExcludeFlag.
     * @return the ExcludeFlag
     */
    public String getExcludeFlag() {
        return (String)getAttributeInternal(EXCLUDEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExcludeFlag.
     * @param value value to set the ExcludeFlag
     */
    public void setExcludeFlag(String value) {
        setAttributeInternal(EXCLUDEFLAG, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the CreatedDate
     */
    public Date getCreatedDate() {
        return (Date)getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Gets the attribute value for BlockedFlag, using the alias name BlockedFlag.
     * @return the BlockedFlag
     */
    public String getBlockedFlag() {
        return (String)getAttributeInternal(BLOCKEDFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for BlockedFlag.
     * @param value value to set the BlockedFlag
     */
    public void setBlockedFlag(String value) {
        setAttributeInternal(BLOCKEDFLAG, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity TraxBlockingRuleHdrImpl.
     */
    public TraxBlockingRuleHdrImpl getTraxBlockingRuleHdr() {
        return (TraxBlockingRuleHdrImpl)getAttributeInternal(TRAXBLOCKINGRULEHDR);
    }

    /**
     * Sets <code>value</code> as the associated entity TraxBlockingRuleHdrImpl.
     */
    public void setTraxBlockingRuleHdr(TraxBlockingRuleHdrImpl value) {
        setAttributeInternal(TRAXBLOCKINGRULEHDR, value);
    }

    /**
     * Validation method for TraxBlockingRuleDtl.
     */
    public boolean validateBrValue() {
        return true;
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }


}
