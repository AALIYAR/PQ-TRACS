package com.pq.tracs.model.bo;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContractAttachmentImpl extends TracsBaseEntity {
    private static EntityDefImpl mDefinitionObject;
    
    //default file storing location.. ->Sudhir


    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(ContractAttachmentImpl obj) {
                return obj.getId();
            }

            public void put(ContractAttachmentImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        ContractId {
            public Object get(ContractAttachmentImpl obj) {
                return obj.getContractId();
            }

            public void put(ContractAttachmentImpl obj, Object value) {
                obj.setContractId((Number)value);
            }
        }
        ,
        Name {
            public Object get(ContractAttachmentImpl obj) {
                return obj.getName();
            }

            public void put(ContractAttachmentImpl obj, Object value) {
                obj.setName((String)value);
            }
        }
        ,
        Description {
            public Object get(ContractAttachmentImpl obj) {
                return obj.getDescription();
            }

            public void put(ContractAttachmentImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        }
        ,
        CreatedBy {
            public Object get(ContractAttachmentImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(ContractAttachmentImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CreatedDate {
            public Object get(ContractAttachmentImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(ContractAttachmentImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(ContractAttachmentImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(ContractAttachmentImpl obj, Object value) {
                obj.setLastUpdatedBy((String)value);
            }
        }
        ,
        LastUpdatedDate {
            public Object get(ContractAttachmentImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(ContractAttachmentImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        FileType {
            public Object get(ContractAttachmentImpl obj) {
                return obj.getFileType();
            }

            public void put(ContractAttachmentImpl obj, Object value) {
                obj.setFileType((String)value);
            }
        }
        ,
        FileSize {
            public Object get(ContractAttachmentImpl obj) {
                return obj.getFileSize();
            }

            public void put(ContractAttachmentImpl obj, Object value) {
                obj.setFileSize((Number)value);
            }
        }
        ,
        FilePath {
            public Object get(ContractAttachmentImpl obj) {
                return obj.getFilePath();
            }

            public void put(ContractAttachmentImpl obj, Object value) {
                obj.setFilePath((String)value);
            }
        }
        ,
        Attachment {
            public Object get(ContractAttachmentImpl obj) {
                return obj.getAttachment();
            }

            public void put(ContractAttachmentImpl obj, Object value) {
                obj.setAttachment((BlobDomain)value);
            }
        }
        ,
        AttachmentType {
            public Object get(ContractAttachmentImpl obj) {
                return obj.getAttachmentType();
            }

            public void put(ContractAttachmentImpl obj, Object value) {
                obj.setAttachmentType((String)value);
            }
        }
        ,
        Contract {
            public Object get(ContractAttachmentImpl obj) {
                return obj.getContract();
            }

            public void put(ContractAttachmentImpl obj, Object value) {
                obj.setContract((ContractImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ContractAttachmentImpl object);

        public abstract void put(ContractAttachmentImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int CONTRACTID = AttributesEnum.ContractId.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int FILETYPE = AttributesEnum.FileType.index();
    public static final int FILESIZE = AttributesEnum.FileSize.index();
    public static final int FILEPATH = AttributesEnum.FilePath.index();
    public static final int ATTACHMENT = AttributesEnum.Attachment.index();
    public static final int ATTACHMENTTYPE = AttributesEnum.AttachmentType.index();
    public static final int CONTRACT = AttributesEnum.Contract.index();

    /**This is the default constructor (do not remove)
     */
    public ContractAttachmentImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.pq.tracs.model.bo.ContractAttachment");
        }
        return mDefinitionObject;
    }

    /**Add attribute defaulting logic in this method.
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**Add Entity validation code in this method.
     */
    protected void validateEntity() {
        super.validateEntity();
    }

    /**Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    //sudhir
    /**Custom DML update/insert/delete logic here.
     */
    protected void doDML(int operation, TransactionEvent e) {
    
        super.doDML(operation, e);
    }

    /**Gets the attribute value for Id, using the alias name Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**Sets <code>value</code> as the attribute value for Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**Gets the attribute value for ContractId, using the alias name ContractId
     */
    public Number getContractId() {
        return (Number)getAttributeInternal(CONTRACTID);
    }

    /**Sets <code>value</code> as the attribute value for ContractId
     */
    public void setContractId(Number value) {
        setAttributeInternal(CONTRACTID, value);
    }


    /**Gets the attribute value for Name, using the alias name Name
     */
    public String getName() {
        return (String)getAttributeInternal(NAME);
    }

    /**Sets <code>value</code> as the attribute value for Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**Gets the attribute value for Description, using the alias name Description
     */
    public String getDescription() {
        return (String)getAttributeInternal(DESCRIPTION);
    }

    /**Sets <code>value</code> as the attribute value for Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**Gets the attribute value for CreatedBy, using the alias name CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }


    /**Gets the attribute value for CreatedDate, using the alias name CreatedDate
     */
    public Date getCreatedDate() {
        return (Date)getAttributeInternal(CREATEDDATE);
    }


    /**Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }


    /**getAttrInvokeAccessor: generated method. Do not modify.
     */
    protected Object getAttrInvokeAccessor(int index, 
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**setAttrInvokeAccessor: generated method. Do not modify.
     */
    protected void setAttrInvokeAccessor(int index, Object value, 
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**Gets the associated entity ContractImpl
     */
    public ContractImpl getContract() {
        return (ContractImpl)getAttributeInternal(CONTRACT);
    }

    /**Sets <code>value</code> as the associated entity ContractImpl
     */
    public void setContract(ContractImpl value) {
        setAttributeInternal(CONTRACT, value);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    /**Gets the attribute value for FileType, using the alias name FileType
     */
    public String getFileType() {
        return (String)getAttributeInternal(FILETYPE);
    }

    /**Sets <code>value</code> as the attribute value for FileType
     */
    public void setFileType(String value) {
        setAttributeInternal(FILETYPE, value);
    }


    /**Gets the attribute value for FileSize, using the alias name FileSize
     */
    public Number getFileSize() {
        return (Number)getAttributeInternal(FILESIZE);
    }

    /**Sets <code>value</code> as the attribute value for FileSize
     */
    public void setFileSize(Number value) {
        setAttributeInternal(FILESIZE, value);
    }

    /**Gets the attribute value for FilePath, using the alias name FilePath
     */
    public String getFilePath() {
        return (String)getAttributeInternal(FILEPATH);
    }

    /**Sets <code>value</code> as the attribute value for FilePath
     */
    public void setFilePath(String value) {
        setAttributeInternal(FILEPATH, value);
    }

    /**
     * Gets the attribute value for Attachment, using the alias name Attachment.
     * @return the Attachment
     */
    public BlobDomain getAttachment() {
        return (BlobDomain)getAttributeInternal(ATTACHMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attachment.
     * @param value value to set the Attachment
     */
    public void setAttachment(BlobDomain value) {
        setAttributeInternal(ATTACHMENT, value);
    }

    /**
     * Gets the attribute value for AttachmentType, using the alias name AttachmentType.
     * @return the AttachmentType
     */
    public String getAttachmentType() {
        return (String)getAttributeInternal(ATTACHMENTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttachmentType.
     * @param value value to set the AttachmentType
     */
    public void setAttachmentType(String value) {
        setAttributeInternal(ATTACHMENTTYPE, value);
    }

}
