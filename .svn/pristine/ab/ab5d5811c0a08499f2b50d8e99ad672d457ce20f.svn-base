package com.pq.tracs.model.bo;

import com.pq.tracs.model.dao.ContractViewRowImpl;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;

import oracle.jbo.server.ViewRowImpl;

import oracle.jheadstart.model.JhsUserContext;
import oracle.jheadstart.model.adfbc.v2.JhsApplicationModule;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContractNoteImpl extends TracsBaseEntity {
    private static EntityDefImpl mDefinitionObject;
    
    private int dml_State;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(ContractNoteImpl obj) {
                return obj.getId();
            }

            public void put(ContractNoteImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        ContractId {
            public Object get(ContractNoteImpl obj) {
                return obj.getContractId();
            }

            public void put(ContractNoteImpl obj, Object value) {
                obj.setContractId((Number)value);
            }
        }
        ,
        NoteType {
            public Object get(ContractNoteImpl obj) {
                return obj.getNoteType();
            }

            public void put(ContractNoteImpl obj, Object value) {
                obj.setNoteType((String)value);
            }
        }
        ,
        NoteText {
            public Object get(ContractNoteImpl obj) {
                return obj.getNoteText();
            }

            public void put(ContractNoteImpl obj, Object value) {
                obj.setNoteText((String)value);
            }
        }
        ,
        CreatedBy {
            public Object get(ContractNoteImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(ContractNoteImpl obj, Object value) {
                obj.setCreatedBy((String)value);
            }
        }
        ,
        CreatedDate {
            public Object get(ContractNoteImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(ContractNoteImpl obj, Object value) {
                obj.setCreatedDate((Date)value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(ContractNoteImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(ContractNoteImpl obj, Object value) {
                obj.setLastUpdatedBy((String)value);
            }
        }
        ,
        LastUpdatedDate {
            public Object get(ContractNoteImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(ContractNoteImpl obj, Object value) {
                obj.setLastUpdatedDate((Date)value);
            }
        }
        ,
        Contract {
            public Object get(ContractNoteImpl obj) {
                return obj.getContract();
            }

            public void put(ContractNoteImpl obj, Object value) {
                obj.setContract((ContractImpl)value);
            }
        }
        ,
        ContractView2 {
            public Object get(ContractNoteImpl obj) {
                return obj.getContractView2();
            }

            public void put(ContractNoteImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ContractNoteImpl object);

        public abstract void put(ContractNoteImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int CONTRACTID = AttributesEnum.ContractId.index();
    public static final int NOTETYPE = AttributesEnum.NoteType.index();
    public static final int NOTETEXT = AttributesEnum.NoteText.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int CONTRACT = AttributesEnum.Contract.index();
    public static final int CONTRACTVIEW2 = AttributesEnum.ContractView2.index();

    /**This is the default constructor (do not remove)
     */
    public ContractNoteImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.pq.tracs.model.bo.ContractNote");
        }
        return mDefinitionObject;
    }

    /**Gets the attribute value for Id, using the alias name Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**Sets <code>value</code> as the attribute value for Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**Gets the attribute value for ContractId, using the alias name ContractId
     */
    public Number getContractId() {
        return (Number)getAttributeInternal(CONTRACTID);
    }

    /**Sets <code>value</code> as the attribute value for ContractId
     */
    public void setContractId(Number value) {
        setAttributeInternal(CONTRACTID, value);
    }

    /**Gets the attribute value for NoteType, using the alias name NoteType
     */
    public String getNoteType() {
        return (String)getAttributeInternal(NOTETYPE);
    }

    /**Sets <code>value</code> as the attribute value for NoteType
     */
    public void setNoteType(String value) {
        setAttributeInternal(NOTETYPE, value);
    }

    /**Gets the attribute value for NoteText, using the alias name NoteText
     */
    public String getNoteText() {
        return (String)getAttributeInternal(NOTETEXT);
    }

    /**Sets <code>value</code> as the attribute value for NoteText
     */
    public void setNoteText(String value) {
        setAttributeInternal(NOTETEXT, value);
    }

    /**Gets the attribute value for CreatedBy, using the alias name CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }


    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**Gets the attribute value for CreatedDate, using the alias name CreatedDate
     */
    public Date getCreatedDate() {
        return (Date)getAttributeInternal(CREATEDDATE);
    }


    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }


    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }


    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**getAttrInvokeAccessor: generated method. Do not modify.
     */
    protected Object getAttrInvokeAccessor(int index, 
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**setAttrInvokeAccessor: generated method. Do not modify.
     */
    protected void setAttrInvokeAccessor(int index, Object value, 
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**Gets the associated entity ContractImpl
     */
    public ContractImpl getContract() {
        return (ContractImpl)getAttributeInternal(CONTRACT);
    }

    /**Sets <code>value</code> as the associated entity ContractImpl
     */
    public void setContract(ContractImpl value) {
        setAttributeInternal(CONTRACT, value);
    }

    /**Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**Add Entity validation code in this method.
     */
    protected void validateEntity() {
        super.validateEntity();
    }

    /**Add locking logic here.
     */

    public void lock() {
        super.lock();
    }

    /**Custom DML update/insert/delete logic here.
     */
    protected void doDML(int operation, TransactionEvent e) {
        if(operation==DML_INSERT){
            dml_State=DML_INSERT;
        }

        super.doDML(operation, e);
    }
    public void afterCommit(TransactionEvent e){
       if(dml_State==DML_INSERT){
                ContractViewRowImpl contractRow = getContractView2();
                String s = contractRow.getNoteFlag();
                if(s == null || !s.equalsIgnoreCase("Y")){
                    s = new String("Y");
                    contractRow.setNoteFlag(s);
                    contractRow.getContract().getDBTransaction().commit();
                }
           dml_State=0;
       }
        super.afterCommit(e);
    }

    /**Validation method for ContractNote
     */
    public boolean validateContractNote() {
       
        return true;
    }


    /**Uses the link ContractContractNoteViewLink to return rows of ContractNoteView
     */
    public ContractViewRowImpl getContractView2() {
        return (ContractViewRowImpl)getAttributeInternal(CONTRACTVIEW2);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }


}
