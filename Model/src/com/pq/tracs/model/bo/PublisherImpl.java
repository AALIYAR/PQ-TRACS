package com.pq.tracs.model.bo;

import java.math.BigDecimal;

import java.sql.PreparedStatement;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;

import oracle.jheadstart.util.DatabaseProcedure;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PublisherImpl extends TracsBaseEntity {
    private static EntityDefImpl mDefinitionObject;


    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(PublisherImpl obj) {
                return obj.getId();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        Name {
            public Object get(PublisherImpl obj) {
                return obj.getName();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setName((String)value);
            }
        }
        ,
        SortName {
            public Object get(PublisherImpl obj) {
                return obj.getSortName();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setSortName((String)value);
            }
        }
        ,
        Url {
            public Object get(PublisherImpl obj) {
                return obj.getUrl();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setUrl((String)value);
            }
        }
        ,
        Notes {
            public Object get(PublisherImpl obj) {
                return obj.getNotes();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setNotes((String)value);
            }
        }
        ,
        CreatedBy {
            public Object get(PublisherImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setCreatedBy((String)value);
            }
        }
        ,
        CreatedDate {
            public Object get(PublisherImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setCreatedDate((Date)value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(PublisherImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setLastUpdatedBy((String)value);
            }
        }
        ,
        LastUpdatedDate {
            public Object get(PublisherImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setLastUpdatedDate((Date)value);
            }
        }
        ,
        MsId {
            public Object get(PublisherImpl obj) {
                return obj.getMsId();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setMsId((Number)value);
            }
        }
        ,
        OrgId {
            public Object get(PublisherImpl obj) {
                return obj.getOrgId();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setOrgId((Number)value);
            }
        }
        ,
        PubId {
            public Object get(PublisherImpl obj) {
                return obj.getPubId();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setPubId((Number)value);
            }
        }
        ,
        ContentOwnerID {
            public Object get(PublisherImpl obj) {
                return obj.getContentOwnerID();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setContentOwnerID((Number)value);
            }
        }
        ,
        PublisherAddress {
            public Object get(PublisherImpl obj) {
                return obj.getPublisherAddress();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OvrPublisher {
            public Object get(PublisherImpl obj) {
                return obj.getOvrPublisher();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ContentOwner {
            public Object get(PublisherImpl obj) {
                return obj.getContentOwner();
            }

            public void put(PublisherImpl obj, Object value) {
                obj.setContentOwner((ContentOwnerImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(PublisherImpl object);

        public abstract void put(PublisherImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int SORTNAME = AttributesEnum.SortName.index();
    public static final int URL = AttributesEnum.Url.index();
    public static final int NOTES = AttributesEnum.Notes.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int MSID = AttributesEnum.MsId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int PUBID = AttributesEnum.PubId.index();
    public static final int CONTENTOWNERID = AttributesEnum.ContentOwnerID.index();
    public static final int PUBLISHERADDRESS = AttributesEnum.PublisherAddress.index();
    public static final int OVRPUBLISHER = AttributesEnum.OvrPublisher.index();
    public static final int CONTENTOWNER = AttributesEnum.ContentOwner.index();

    /**This is the default constructor (do not remove)
     */
    public PublisherImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.pq.tracs.model.bo.Publisher");
        }
        return mDefinitionObject;
    }

    /**Gets the attribute value for Id, using the alias name Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**Sets <code>value</code> as the attribute value for Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**Gets the attribute value for Name, using the alias name Name
     */
    public String getName() {
        return (String)getAttributeInternal(NAME);
    }

    /**Sets <code>value</code> as the attribute value for Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**Gets the attribute value for SortName, using the alias name SortName
     */
    public String getSortName() {
        return (String)getAttributeInternal(SORTNAME);
    }

    /**Sets <code>value</code> as the attribute value for SortName
     */
    public void setSortName(String value) {
        setAttributeInternal(SORTNAME, value);
    }

    /**Gets the attribute value for Url, using the alias name Url
     */
    public String getUrl() {
        return (String)getAttributeInternal(URL);
    }

    /**Sets <code>value</code> as the attribute value for Url
     */
    public void setUrl(String value) {
        setAttributeInternal(URL, value);
    }

    /**Gets the attribute value for Notes, using the alias name Notes
     */
    public String getNotes() {
        return (String)getAttributeInternal(NOTES);
    }

    /**Sets <code>value</code> as the attribute value for Notes
     */
    public void setNotes(String value) {
        setAttributeInternal(NOTES, value);
    }

    /**Gets the attribute value for CreatedBy, using the alias name CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**Gets the attribute value for CreatedDate, using the alias name CreatedDate
     */
    public Date getCreatedDate() {
        return (Date)getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }


    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**Gets the attribute value for MsId, using the alias name MsId
     */
    public Number getMsId() {
        return (Number)getAttributeInternal(MSID);
    }

    /**Sets <code>value</code> as the attribute value for MsId
     */
    public void setMsId(Number value) {
        setAttributeInternal(MSID, value);
    }

    /**Gets the attribute value for OrgId, using the alias name OrgId
     */
    public Number getOrgId() {
        return (Number)getAttributeInternal(ORGID);
    }

    /**Sets <code>value</code> as the attribute value for OrgId
     */
    public void setOrgId(Number value) {
        setAttributeInternal(ORGID, value);
    }

    /**getAttrInvokeAccessor: generated method. Do not modify.
     */
    protected Object getAttrInvokeAccessor(int index, 
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**setAttrInvokeAccessor: generated method. Do not modify.
     */
    protected void setAttrInvokeAccessor(int index, Object value, 
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**Gets the associated entity oracle.jbo.RowIterator
     */
    public RowIterator getPublisherAddress() {
        return (RowIterator)getAttributeInternal(PUBLISHERADDRESS);
    }

    /**Gets the associated entity oracle.jbo.RowIterator
     */
    public RowIterator getOvrPublisher() {
        return (RowIterator)getAttributeInternal(OVRPUBLISHER);
    }


    /**
     * @return the associated entity ContentOwnerImpl.
     */
    public ContentOwnerImpl getContentOwner() {
        return (ContentOwnerImpl)getAttributeInternal(CONTENTOWNER);
    }

    /**
     * Sets <code>value</code> as the associated entity ContentOwnerImpl.
     */
    public void setContentOwner(ContentOwnerImpl value) {
        setAttributeInternal(CONTENTOWNER, value);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    /**Gets the attribute value for PubId, using the alias name PubId
     */
    public Number getPubId() {
        return (Number)getAttributeInternal(PUBID);
    }

    /**Sets <code>value</code> as the attribute value for PubId
     */
    public void setPubId(Number value) {
        setAttributeInternal(PUBID, value);
    }


    /**
     * Gets the attribute value for ContentOwnerID, using the alias name ContentOwnerID.
     * @return the ContentOwnerID
     */
    public Number getContentOwnerID() {
        return (Number)getAttributeInternal(CONTENTOWNERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContentOwnerID.
     * @param value value to set the ContentOwnerID
     */
    public void setContentOwnerID(Number value) {
        setAttributeInternal(CONTENTOWNERID, value);
        
    }
    
    
    private void publisherAddress() {
        try {
            Number acctId = this.getContentOwnerID();
            Number pId = this.getId();
            String user = this.getLoginUserId();

            DatabaseProcedure publisherAddressProc =
                DatabaseProcedure.define("procedure pk_prm_content_owner_methods.publisher_address" +
                                         "( p_content_owner_id in number, p_publisher_id in number, v_username varchar2)");
            DatabaseProcedure.Result result =
                publisherAddressProc.call(this.getDBTransaction(), acctId,
                                                pId, user);


                FacesContext.getCurrentInstance().addMessage(null,
                                                             new FacesMessage("Address added Successfully!"));

        } catch (Exception ex) {
            FacesContext.getCurrentInstance().addMessage(null,
                                                         new FacesMessage(ex.getMessage()));
        }

    }

    protected void prepareForDML(int operation, TransactionEvent e) {

        super.prepareForDML(operation,e);

        try {
            if (operation == DML_INSERT) {
                SequenceImpl seq = new SequenceImpl("TRAX_PUBLISHER_PUB_ID_SEQ",getDBTransaction());
                Number seqNo = seq.getSequenceNumber();
                
                this.setPubId(seqNo);
            }
            
            
            
            if(operation == DML_DELETE)  {
                PreparedStatement pstmt = null;
                PreparedStatement pstmt1 = null;
                
                try{
                
                   pstmt = getDBTransaction().createPreparedStatement("delete from TRACS.TRAX_OVR_PUBLISHER where publisher_id=?",1);
                   pstmt1 = getDBTransaction().createPreparedStatement("delete from TRACS.TRAX_PUBLISHER_ADDRESS where publisher_id=?",1);
        
                   pstmt.setInt(1, this.getId().intValue());
                   pstmt.executeUpdate();
                   
                   pstmt1.setInt(1, this.getId().intValue());
                   pstmt1.executeUpdate();
                  
                   
                }catch(Exception ee){
                   ee.printStackTrace();
                }
                finally{
                    try{
                        if(pstmt!=null) pstmt.close();
                    }catch(Exception eeee){}
                    try{
                        if(pstmt1!=null) pstmt1.close();
                    }catch(Exception eeee){}
                   
                }
                
            }

        }catch(Exception eee){}
    }
    
  
    
    @Override
    protected void doDML(int i, TransactionEvent transactionEvent) {
        super.doDML(i, transactionEvent);
        if (this.getContentOwnerID() != null && this.getPublisherAddress().getRowCount() == 0 && i != DML_DELETE) {
            publisherAddress();
        }
    }

   

}
