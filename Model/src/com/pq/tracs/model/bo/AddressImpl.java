package com.pq.tracs.model.bo;

import java.sql.PreparedStatement;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AddressImpl extends TracsBaseEntity {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(AddressImpl obj) {
                return obj.getId();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        PrimaryFlag {
            public Object get(AddressImpl obj) {
                return obj.getPrimaryFlag();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setPrimaryFlag((String)value);
            }
        }
        ,
        BillToFlag {
            public Object get(AddressImpl obj) {
                return obj.getBillToFlag();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setBillToFlag((String)value);
            }
        }
        ,
        ShipToFlag {
            public Object get(AddressImpl obj) {
                return obj.getShipToFlag();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setShipToFlag((String)value);
            }
        }
        ,
        ActiveFlag {
            public Object get(AddressImpl obj) {
                return obj.getActiveFlag();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setActiveFlag((String)value);
            }
        }
        ,
        SiteOrDepartment {
            public Object get(AddressImpl obj) {
                return obj.getSiteOrDepartment();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setSiteOrDepartment((String)value);
            }
        }
        ,
        AddressLine1 {
            public Object get(AddressImpl obj) {
                return obj.getAddressLine1();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setAddressLine1((String)value);
            }
        }
        ,
        AddressLine2 {
            public Object get(AddressImpl obj) {
                return obj.getAddressLine2();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setAddressLine2((String)value);
            }
        }
        ,
        City {
            public Object get(AddressImpl obj) {
                return obj.getCity();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setCity((String)value);
            }
        }
        ,
        StateOrProvince {
            public Object get(AddressImpl obj) {
                return obj.getStateOrProvince();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setStateOrProvince((String)value);
            }
        }
        ,
        ZipOrPostalCode {
            public Object get(AddressImpl obj) {
                return obj.getZipOrPostalCode();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setZipOrPostalCode((String)value);
            }
        }
        ,
        Country {
            public Object get(AddressImpl obj) {
                return obj.getCountry();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setCountry((String)value);
            }
        }
        ,
        County {
            public Object get(AddressImpl obj) {
                return obj.getCounty();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setCounty((String)value);
            }
        }
        ,
        SitePhoneNumber {
            public Object get(AddressImpl obj) {
                return obj.getSitePhoneNumber();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setSitePhoneNumber((String)value);
            }
        }
        ,
        EffectiveStartDate {
            public Object get(AddressImpl obj) {
                return obj.getEffectiveStartDate();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setEffectiveStartDate((Date)value);
            }
        }
        ,
        OverrideAddressValidFlag {
            public Object get(AddressImpl obj) {
                return obj.getOverrideAddressValidFlag();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setOverrideAddressValidFlag((String)value);
            }
        }
        ,
        AddressComments {
            public Object get(AddressImpl obj) {
                return obj.getAddressComments();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setAddressComments((String)value);
            }
        }
        ,
        ContentOwnerId {
            public Object get(AddressImpl obj) {
                return obj.getContentOwnerId();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setContentOwnerId((Number)value);
            }
        }
        ,
        CreatedBy {
            public Object get(AddressImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CreatedDate {
            public Object get(AddressImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(AddressImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setLastUpdatedBy((String)value);
            }
        }
        ,
        LastUpdatedDate {
            public Object get(AddressImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ContentOwner {
            public Object get(AddressImpl obj) {
                return obj.getContentOwner();
            }

            public void put(AddressImpl obj, Object value) {
                obj.setContentOwner((ContentOwnerImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AddressImpl object);

        public abstract void put(AddressImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int ID = AttributesEnum.Id.index();
    public static final int PRIMARYFLAG = AttributesEnum.PrimaryFlag.index();
    public static final int BILLTOFLAG = AttributesEnum.BillToFlag.index();
    public static final int SHIPTOFLAG = AttributesEnum.ShipToFlag.index();
    public static final int ACTIVEFLAG = AttributesEnum.ActiveFlag.index();
    public static final int SITEORDEPARTMENT = AttributesEnum.SiteOrDepartment.index();
    public static final int ADDRESSLINE1 = AttributesEnum.AddressLine1.index();
    public static final int ADDRESSLINE2 = AttributesEnum.AddressLine2.index();
    public static final int CITY = AttributesEnum.City.index();
    public static final int STATEORPROVINCE = AttributesEnum.StateOrProvince.index();
    public static final int ZIPORPOSTALCODE = AttributesEnum.ZipOrPostalCode.index();
    public static final int COUNTRY = AttributesEnum.Country.index();
    public static final int COUNTY = AttributesEnum.County.index();
    public static final int SITEPHONENUMBER = AttributesEnum.SitePhoneNumber.index();
    public static final int EFFECTIVESTARTDATE = AttributesEnum.EffectiveStartDate.index();
    public static final int OVERRIDEADDRESSVALIDFLAG = AttributesEnum.OverrideAddressValidFlag.index();
    public static final int ADDRESSCOMMENTS = AttributesEnum.AddressComments.index();
    public static final int CONTENTOWNERID = AttributesEnum.ContentOwnerId.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int CONTENTOWNER = AttributesEnum.ContentOwner.index();

    /**This is the default constructor (do not remove)
     */
    public AddressImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.pq.tracs.model.bo.Address");
        }
        return mDefinitionObject;
    }

    /**Gets the attribute value for Id, using the alias name Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**Sets <code>value</code> as the attribute value for Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**Gets the attribute value for PrimaryFlag, using the alias name PrimaryFlag
     */
    public String getPrimaryFlag() {
        return (String)getAttributeInternal(PRIMARYFLAG);
    }

    /**Sets <code>value</code> as the attribute value for PrimaryFlag
     */
    public void setPrimaryFlag(String value) {
        setAttributeInternal(PRIMARYFLAG, value);
    }

    /**Gets the attribute value for BillToFlag, using the alias name BillToFlag
     */
    public String getBillToFlag() {
        return (String)getAttributeInternal(BILLTOFLAG);
    }

    /**Sets <code>value</code> as the attribute value for BillToFlag
     */
    public void setBillToFlag(String value) {
        setAttributeInternal(BILLTOFLAG, value);
    }

    /**Gets the attribute value for ShipToFlag, using the alias name ShipToFlag
     */
    public String getShipToFlag() {
        return (String)getAttributeInternal(SHIPTOFLAG);
    }

    /**Sets <code>value</code> as the attribute value for ShipToFlag
     */
    public void setShipToFlag(String value) {
        setAttributeInternal(SHIPTOFLAG, value);
    }

    /**Gets the attribute value for ActiveFlag, using the alias name ActiveFlag
     */
    public String getActiveFlag() {
        return (String)getAttributeInternal(ACTIVEFLAG);
    }

    /**Sets <code>value</code> as the attribute value for ActiveFlag
     */
    public void setActiveFlag(String value) {
        setAttributeInternal(ACTIVEFLAG, value);
    }

    /**Gets the attribute value for SiteOrDepartment, using the alias name SiteOrDepartment
     */
    public String getSiteOrDepartment() {
        return (String)getAttributeInternal(SITEORDEPARTMENT);
    }

    /**Sets <code>value</code> as the attribute value for SiteOrDepartment
     */
    public void setSiteOrDepartment(String value) {
        setAttributeInternal(SITEORDEPARTMENT, value);
    }

    /**Gets the attribute value for AddressLine1, using the alias name AddressLine1
     */
    public String getAddressLine1() {
        return (String)getAttributeInternal(ADDRESSLINE1);
    }

    /**Sets <code>value</code> as the attribute value for AddressLine1
     */
    public void setAddressLine1(String value) {
        setAttributeInternal(ADDRESSLINE1, value);
    }

    /**Gets the attribute value for AddressLine2, using the alias name AddressLine2
     */
    public String getAddressLine2() {
        return (String)getAttributeInternal(ADDRESSLINE2);
    }

    /**Sets <code>value</code> as the attribute value for AddressLine2
     */
    public void setAddressLine2(String value) {
        setAttributeInternal(ADDRESSLINE2, value);
    }

    /**Gets the attribute value for City, using the alias name City
     */
    public String getCity() {
        return (String)getAttributeInternal(CITY);
    }

    /**Sets <code>value</code> as the attribute value for City
     */
    public void setCity(String value) {
        setAttributeInternal(CITY, value);
    }

    /**Gets the attribute value for StateOrProvince, using the alias name StateOrProvince
     */
    public String getStateOrProvince() {
        return (String)getAttributeInternal(STATEORPROVINCE);
    }

    /**Sets <code>value</code> as the attribute value for StateOrProvince
     */
    public void setStateOrProvince(String value) {
        setAttributeInternal(STATEORPROVINCE, value);
    }

    /**Gets the attribute value for ZipOrPostalCode, using the alias name ZipOrPostalCode
     */
    public String getZipOrPostalCode() {
        return (String)getAttributeInternal(ZIPORPOSTALCODE);
    }

    /**Sets <code>value</code> as the attribute value for ZipOrPostalCode
     */
    public void setZipOrPostalCode(String value) {
        setAttributeInternal(ZIPORPOSTALCODE, value);
    }

    /**Gets the attribute value for Country, using the alias name Country
     */
    public String getCountry() {
        return (String)getAttributeInternal(COUNTRY);
    }

    /**Sets <code>value</code> as the attribute value for Country
     */
    public void setCountry(String value) {
        setAttributeInternal(COUNTRY, value);
    }

    /**Gets the attribute value for County, using the alias name County
     */
    public String getCounty() {
        return (String)getAttributeInternal(COUNTY);
    }

    /**Sets <code>value</code> as the attribute value for County
     */
    public void setCounty(String value) {
        setAttributeInternal(COUNTY, value);
    }

    /**Gets the attribute value for SitePhoneNumber, using the alias name SitePhoneNumber
     */
    public String getSitePhoneNumber() {
        return (String)getAttributeInternal(SITEPHONENUMBER);
    }

    /**Sets <code>value</code> as the attribute value for SitePhoneNumber
     */
    public void setSitePhoneNumber(String value) {            
        setAttributeInternal(SITEPHONENUMBER, value);
    }


    /**Gets the attribute value for EffectiveStartDate, using the alias name EffectiveStartDate
     */
    public Date getEffectiveStartDate() {
        return (Date)getAttributeInternal(EFFECTIVESTARTDATE);
    }

    /**Sets <code>value</code> as the attribute value for EffectiveStartDate
     */
    public void setEffectiveStartDate(Date value) {
        setAttributeInternal(EFFECTIVESTARTDATE, value);
    }

    /**Gets the attribute value for OverrideAddressValidFlag, using the alias name OverrideAddressValidFlag
     */
    public String getOverrideAddressValidFlag() {
        return (String)getAttributeInternal(OVERRIDEADDRESSVALIDFLAG);
    }

    /**Sets <code>value</code> as the attribute value for OverrideAddressValidFlag
     */
    public void setOverrideAddressValidFlag(String value) {
        setAttributeInternal(OVERRIDEADDRESSVALIDFLAG, value);
    }


    /**Gets the attribute value for AddressComments, using the alias name AddressComments
     */
    public String getAddressComments() {
        return (String)getAttributeInternal(ADDRESSCOMMENTS);
    }

    /**Sets <code>value</code> as the attribute value for AddressComments
     */
    public void setAddressComments(String value) {
        setAttributeInternal(ADDRESSCOMMENTS, value);
    }

    /**Gets the attribute value for ContentOwnerId, using the alias name ContentOwnerId
     */
    public Number getContentOwnerId() {
        return (Number)getAttributeInternal(CONTENTOWNERID);
    }

    /**Sets <code>value</code> as the attribute value for ContentOwnerId
     */
    public void setContentOwnerId(Number value) {
        setAttributeInternal(CONTENTOWNERID, value);
    }

    /**Gets the attribute value for CreatedBy, using the alias name CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }


    /**Gets the attribute value for CreatedDate, using the alias name CreatedDate
     */
    public Date getCreatedDate() {
        return (Date)getAttributeInternal(CREATEDDATE);
    }


    /**Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }

    /**Sets <code>value</code> as the attribute value for LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }


    /**getAttrInvokeAccessor: generated method. Do not modify.
     */
    protected Object getAttrInvokeAccessor(int index, 
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**setAttrInvokeAccessor: generated method. Do not modify.
     */
    protected void setAttrInvokeAccessor(int index, Object value, 
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**Gets the associated entity ContentOwnerImpl
     */
    public ContentOwnerImpl getContentOwner() {
        return (ContentOwnerImpl)getAttributeInternal(CONTENTOWNER);
    }

    /**Sets <code>value</code> as the associated entity ContentOwnerImpl
     */
    public void setContentOwner(ContentOwnerImpl value) {
        setAttributeInternal(CONTENTOWNER, value);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    /**Custom DML update/insert/delete logic here.
     */
    protected void prepareForDML(int operation, TransactionEvent e) {
        super.prepareForDML(operation, e);
        
         try {
             if (getContentOwnerId()!=null &&(operation == DML_INSERT || operation == DML_UPDATE)) {
                 if(getContentOwner().getAddress().getRowCount()<=1){
                     setPrimaryFlag("Y");
                 }
             }
         } catch (Exception efg) {
             
         }       
                 
        if(getContentOwnerId()!=null && (operation==DML_INSERT || operation==DML_UPDATE) && "Y".equals(getPrimaryFlag()) && isAttributeChanged(PRIMARYFLAG)){
            PreparedStatement pstmt=null;
            try{
                String s = "UPDATE TRAX_ADDRESS SET PRIMARY_FLAG = 'N' WHERE CONTENT_OWNER_ID=?";
                if(operation==DML_UPDATE)
                    s = s + " AND id!=?";
                
                pstmt = getDBTransaction().createPreparedStatement(s,1);
                pstmt.setInt(1,getContentOwnerId().intValue());
                if(operation==DML_UPDATE)
                    pstmt.setInt(2,getId().intValue());
                int i = pstmt.executeUpdate();
            }catch(Exception ee){
                ee.printStackTrace();   
            }
            finally{
                try{
                    if(pstmt!=null) pstmt.close();
                }catch(Exception eee){}
            }
        }
        
    }


    protected void validateEntity() {
           
        if(("USA".equals(getCountry()) || "CAN".equals(getCountry())) && (getStateOrProvince()==null || getStateOrProvince().trim().length()==0)){
            throw new JboException("State Or Province - Required value for United States and Canada.");
        }

    
        super.validateEntity();
    }


}
