package com.pq.tracs.model.eo;

import com.pq.tracs.model.bo.TitleSubjectImpl;
import com.pq.tracs.model.bo.TracsBaseEntity;

import com.pq.tracs.model.vo.TraxBlockingRuleDtlViewRowImpl;

import java.math.BigDecimal;

import oracle.jbo.AttributeDef;
import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 08 16:50:23 EDT 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TraxBlockingRuleHdrImpl extends TracsBaseEntity {
    private static EntityDefImpl mDefinitionObject;

    @Override
    protected void setInvalid() {
        super.setInvalid();
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        
      try {
          AttributeDef[] attrs = 
              this.getEntityDef().getAttributeDefs();
          String nameKeyAttr = null;
          for (AttributeDef attr: attrs) {
              if (attr.getName()=="BlockingRuleNumber") {
                  nameKeyAttr = attr.getName();
                  break;
              }            
            
          }
          
          
          
          if (nameKeyAttr != null ) {
              SequenceImpl seq = 
                  new SequenceImpl("TRAX_BLOCKING_RULE_NUMBER_SEQ", getDBTransaction());
              this.setAttribute(nameKeyAttr, 
                                seq.getSequenceNumber());
          }
      } catch (Exception e1) {
          System.out.println("*******************Exception while inseting(primary key generation) in TracsBaseEntity.***********************");
          System.out.println("Error :" + e1.toString());
          //throw new JboException("Invalid primary key value.");
      }
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(TraxBlockingRuleHdrImpl obj) {
                return obj.getId();
            }

            public void put(TraxBlockingRuleHdrImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        BlockingRuleName {
            public Object get(TraxBlockingRuleHdrImpl obj) {
                return obj.getBlockingRuleName();
            }

            public void put(TraxBlockingRuleHdrImpl obj, Object value) {
                obj.setBlockingRuleName((String)value);
            }
        }
        ,
        BlockingRuleDescription {
            public Object get(TraxBlockingRuleHdrImpl obj) {
                return obj.getBlockingRuleDescription();
            }

            public void put(TraxBlockingRuleHdrImpl obj, Object value) {
                obj.setBlockingRuleDescription((String)value);
            }
        }
        ,
        BlockingRuleStatus {
            public Object get(TraxBlockingRuleHdrImpl obj) {
                return obj.getBlockingRuleStatus();
            }

            public void put(TraxBlockingRuleHdrImpl obj, Object value) {
                obj.setBlockingRuleStatus((String)value);
            }
        }
        ,
        CreatedBy {
            public Object get(TraxBlockingRuleHdrImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(TraxBlockingRuleHdrImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CreatedDate {
            public Object get(TraxBlockingRuleHdrImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(TraxBlockingRuleHdrImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(TraxBlockingRuleHdrImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(TraxBlockingRuleHdrImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastUpdatedDate {
            public Object get(TraxBlockingRuleHdrImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(TraxBlockingRuleHdrImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        BlockingRuleNumber {
            public Object get(TraxBlockingRuleHdrImpl obj) {
                return obj.getBlockingRuleNumber();
            }

            public void put(TraxBlockingRuleHdrImpl obj, Object value) {
                obj.setBlockingRuleNumber((Number)value);
            }
        }
        ,
        TraxBlockingRuleOvr {
            public Object get(TraxBlockingRuleHdrImpl obj) {
                return obj.getTraxBlockingRuleOvr();
            }

            public void put(TraxBlockingRuleHdrImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TraxBlockingRuleDtl {
            public Object get(TraxBlockingRuleHdrImpl obj) {
                return obj.getTraxBlockingRuleDtl();
            }

            public void put(TraxBlockingRuleHdrImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TraxBlockingRuleHdrImpl object);

        public abstract void put(TraxBlockingRuleHdrImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int BLOCKINGRULENAME = AttributesEnum.BlockingRuleName.index();
    public static final int BLOCKINGRULEDESCRIPTION = AttributesEnum.BlockingRuleDescription.index();
    public static final int BLOCKINGRULESTATUS = AttributesEnum.BlockingRuleStatus.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int BLOCKINGRULENUMBER = AttributesEnum.BlockingRuleNumber.index();
    public static final int TRAXBLOCKINGRULEOVR = AttributesEnum.TraxBlockingRuleOvr.index();
    public static final int TRAXBLOCKINGRULEDTL = AttributesEnum.TraxBlockingRuleDtl.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TraxBlockingRuleHdrImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.pq.tracs.model.eo.TraxBlockingRuleHdr");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for BlockingRuleName, using the alias name BlockingRuleName.
     * @return the BlockingRuleName
     */
    public String getBlockingRuleName() {
        return (String)getAttributeInternal(BLOCKINGRULENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for BlockingRuleName.
     * @param value value to set the BlockingRuleName
     */
    public void setBlockingRuleName(String value) {
        setAttributeInternal(BLOCKINGRULENAME, value);
    }

    /**
     * Gets the attribute value for BlockingRuleDescription, using the alias name BlockingRuleDescription.
     * @return the BlockingRuleDescription
     */
    public String getBlockingRuleDescription() {
        return (String)getAttributeInternal(BLOCKINGRULEDESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for BlockingRuleDescription.
     * @param value value to set the BlockingRuleDescription
     */
    public void setBlockingRuleDescription(String value) {
        setAttributeInternal(BLOCKINGRULEDESCRIPTION, value);
    }

    /**
     * Gets the attribute value for BlockingRuleStatus, using the alias name BlockingRuleStatus.
     * @return the BlockingRuleStatus
     */
    public String getBlockingRuleStatus() {
        return (String)getAttributeInternal(BLOCKINGRULESTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for BlockingRuleStatus.
     * @param value value to set the BlockingRuleStatus
     */
    public void setBlockingRuleStatus(String value) {
        setAttributeInternal(BLOCKINGRULESTATUS, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the CreatedDate
     */
    public Date getCreatedDate() {
        return (Date)getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Gets the attribute value for BlockingRuleNumber, using the alias name BlockingRuleNumber.
     * @return the BlockingRuleNumber
     */
    public Number getBlockingRuleNumber() {
        return (Number)getAttributeInternal(BLOCKINGRULENUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for BlockingRuleNumber.
     * @param value value to set the BlockingRuleNumber
     */
    public void setBlockingRuleNumber(Number value) {
        setAttributeInternal(BLOCKINGRULENUMBER, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxBlockingRuleOvr() {
        return (RowIterator)getAttributeInternal(TRAXBLOCKINGRULEOVR);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxBlockingRuleDtl() {
        return (RowIterator)getAttributeInternal(TRAXBLOCKINGRULEDTL);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    /**
     * Validation method for TraxBlockingRuleHdr.
     */
    public boolean validateBlockedFlagonSubMarket() {
      //System.out.println("inside validate subMarket");  
      RowIterator acctIter = this.getTraxBlockingRuleDtl();           
            
      TraxBlockingRuleDtlImpl dtl = null;
      TraxBlockingRuleDtlImpl subDtl = null;
      
     
      int j = 0;
      int k,l,m ;
      //m is no of sub markets which are blocked
      
      while (j < this.getTraxBlockingRuleDtl().getRowCount()) 
      {
          dtl = (TraxBlockingRuleDtlImpl)acctIter.next();         
          
          
          if("MARKET".equalsIgnoreCase(dtl.getBlockingRuleType())) 
          {
             System.out.println("validating Market"+dtl.getBlockingRuleValue()); 
              RowIterator subIter = this.getTraxBlockingRuleDtl();            
              l = 0; // no of submarkets of a market
              k =0;
              m = 0;
              while (k < this.getTraxBlockingRuleDtl().getRowCount()) 
              {
               
                 subDtl = (TraxBlockingRuleDtlImpl)subIter.next();  
                 //System.out.println("validating Sub Market"+subDtl.getBlockingRuleValue()); 
               //System.out.println("subDtl Rel LineId"+subDtl.getAttribute("RelatedLineId"));
               //System.out.println("Dtl Id "+dtl.getAttribute("Id"));
                  Number rId =(Number) subDtl.getAttribute("RelatedLineId") ;
                  Number id =(Number) dtl.getAttribute("Id") ;
               
               if (rId != null)  
               {
                 int iRid = rId.intValue();
                 int iId = id.intValue();
                 int z = iRid - iId;
                 System.out.println("diff "+z);
                 if(iRid == iId  )
                 {
                   //System.out.println("incrementing count of submarkets "+subDtl.getBlockingRuleValue());   
                   l ++;  
                   if("Y".equalsIgnoreCase(subDtl.getBlockedFlag())) {
                       m++;
                   }
                   
               
                 }
               }
                
                 k++;
             }
             
             if (m > 0) 
             {
                //System.out.println("m>0 no of blocked submarkets>0");
                if (m != l) 
                {
                  //System.out.println("m. no of blocked sub markets  != l . no of sub markets");
                  return false;
                }
             }
         }       
          
         j++;
         
      }        
        return true;
    }


    /**
     * Validation method for TraxBlockingRuleHdr.
     */
    public boolean validateBlockedFlagONCountry() {
      //System.out.println("inside validate country");  
      RowIterator acctIter = this.getTraxBlockingRuleDtl();
      
      TraxBlockingRuleDtlImpl dtl = null;
      int i = 0;
      int j = 0;
      int k = 0;
      
      while (j < this.getTraxBlockingRuleDtl().getRowCount()) {
          dtl = (TraxBlockingRuleDtlImpl)acctIter.next();
          
        if("COUNTRY".equalsIgnoreCase(dtl.getBlockingRuleType())) {
            i++;
            
          if("Y".equalsIgnoreCase(dtl.getBlockedFlag())) {
              k++;
          }
        }
          
          
          
          
          j++;
         
      }  
      
        if (k > 0) {
            //System.out.println("i>0");
          if (i != k) {
            //System.out.println("i != k");
            return false;
          }
        }
        return true;
    }


}
