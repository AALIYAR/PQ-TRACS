package com.pq.tracs.model.eo;

import com.pq.tracs.model.bo.TracsBaseEntity;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.domain.Date;

import oracle.jheadstart.util.DatabaseProcedure;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Dec 17 12:04:41 EST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TraxImportFileImpl extends TracsBaseEntity {
    private static EntityDefImpl mDefinitionObject;
    
  @Override
  protected void doDML(int operation, TransactionEvent transactionEvent) {
      super.doDML(operation, transactionEvent);

      if (operation == DML_INSERT) {
        this.parseImportFile();
      } 
      //else if (operation == DML_UPDATE && this.getValidatedRowCount() != null) {
      //  this.saveImportData();
      //}
  }

  @Override
  protected void create(AttributeList atts) {
      super.create(atts);

      try {
          SequenceImpl seq =
              new SequenceImpl("TRAX_IMPORT_NUMBER_SEQ", getDBTransaction());
          this.setImportNumber(seq.getSequenceNumber());

      } catch (Exception e1) {
          System.out.println("*******************Exception while creating target tracking number***********************");
          System.out.println("Error :" + e1.toString());
          //throw new JboException("Invalid primary key value.");
      }
  }

   
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(TraxImportFileImpl obj) {
                return obj.getId();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setId((Number)value);
            }
        }
        ,
        TargetGroupId {
            public Object get(TraxImportFileImpl obj) {
                return obj.getTargetGroupId();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setTargetGroupId((Number)value);
            }
        }
        ,
        FileName {
            public Object get(TraxImportFileImpl obj) {
                return obj.getFileName();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setFileName((String)value);
            }
        }
        ,
        ImportType {
            public Object get(TraxImportFileImpl obj) {
                return obj.getImportType();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setImportType((String)value);
            }
        }
        ,
        ImportStatus {
            public Object get(TraxImportFileImpl obj) {
                return obj.getImportStatus();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setImportStatus((String)value);
            }
        }
        ,
        ImportNote {
            public Object get(TraxImportFileImpl obj) {
                return obj.getImportNote();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setImportNote((String)value);
            }
        }
        ,
        CreatedBy {
            public Object get(TraxImportFileImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setCreatedBy((String)value);
            }
        }
        ,
        CreatedDate {
            public Object get(TraxImportFileImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setCreatedDate((Date)value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(TraxImportFileImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setLastUpdatedBy((String)value);
            }
        }
        ,
        LastUpdatedDate {
            public Object get(TraxImportFileImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setLastUpdatedDate((Date)value);
            }
        }
        ,
        ImportNumber {
            public Object get(TraxImportFileImpl obj) {
                return obj.getImportNumber();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setImportNumber((Number)value);
            }
        }
        ,
        ParsedRowCount {
            public Object get(TraxImportFileImpl obj) {
                return obj.getParsedRowCount();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setParsedRowCount((Number)value);
            }
        }
        ,
        ParseErrorCount {
            public Object get(TraxImportFileImpl obj) {
                return obj.getParseErrorCount();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setParseErrorCount((Number)value);
            }
        }
        ,
        ValidatedRowCount {
            public Object get(TraxImportFileImpl obj) {
                return obj.getValidatedRowCount();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setValidatedRowCount((Number)value);
            }
        }
        ,
        ValidationWarningCount {
            public Object get(TraxImportFileImpl obj) {
                return obj.getValidationWarningCount();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setValidationWarningCount((Number)value);
            }
        }
        ,
        ValidationErrorCount {
            public Object get(TraxImportFileImpl obj) {
                return obj.getValidationErrorCount();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setValidationErrorCount((Number)value);
            }
        }
        ,
        ImportedRowCount {
            public Object get(TraxImportFileImpl obj) {
                return obj.getImportedRowCount();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setImportedRowCount((Number)value);
            }
        }
        ,
        ImportFile {
            public Object get(TraxImportFileImpl obj) {
                return obj.getImportFile();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setImportFile((BlobDomain)value);
            }
        }
        ,
        PotentialMatchCount {
            public Object get(TraxImportFileImpl obj) {
                return obj.getPotentialMatchCount();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setPotentialMatchCount((Number)value);
            }
        }
        ,
        ImportFileName {
            public Object get(TraxImportFileImpl obj) {
                return obj.getImportFileName();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setImportFileName((String)value);
            }
        }
        ,
        OverwriteAutogenFlag {
            public Object get(TraxImportFileImpl obj) {
                return obj.getOverwriteAutogenFlag();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setOverwriteAutogenFlag((String)value);
            }
        }
        ,
        TraxImportDataParse {
            public Object get(TraxImportFileImpl obj) {
                return obj.getTraxImportDataParse();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TraxImportPotentialMatch {
            public Object get(TraxImportFileImpl obj) {
                return obj.getTraxImportPotentialMatch();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TraxImportValidationMessage {
            public Object get(TraxImportFileImpl obj) {
                return obj.getTraxImportValidationMessage();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TraxImportOvrDataParse {
            public Object get(TraxImportFileImpl obj) {
                return obj.getTraxImportOvrDataParse();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TraxImportOvrLegacyParse {
            public Object get(TraxImportFileImpl obj) {
                return obj.getTraxImportOvrLegacyParse();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PrmTargetGroup {
            public Object get(TraxImportFileImpl obj) {
                return obj.getPrmTargetGroup();
            }

            public void put(TraxImportFileImpl obj, Object value) {
                obj.setPrmTargetGroup((PrmTargetGroupImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TraxImportFileImpl object);

        public abstract void put(TraxImportFileImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int TARGETGROUPID = AttributesEnum.TargetGroupId.index();
    public static final int FILENAME = AttributesEnum.FileName.index();
    public static final int IMPORTTYPE = AttributesEnum.ImportType.index();
    public static final int IMPORTSTATUS = AttributesEnum.ImportStatus.index();
    public static final int IMPORTNOTE = AttributesEnum.ImportNote.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int IMPORTNUMBER = AttributesEnum.ImportNumber.index();
    public static final int PARSEDROWCOUNT = AttributesEnum.ParsedRowCount.index();
    public static final int PARSEERRORCOUNT = AttributesEnum.ParseErrorCount.index();
    public static final int VALIDATEDROWCOUNT = AttributesEnum.ValidatedRowCount.index();
    public static final int VALIDATIONWARNINGCOUNT = AttributesEnum.ValidationWarningCount.index();
    public static final int VALIDATIONERRORCOUNT = AttributesEnum.ValidationErrorCount.index();
    public static final int IMPORTEDROWCOUNT = AttributesEnum.ImportedRowCount.index();
    public static final int IMPORTFILE = AttributesEnum.ImportFile.index();
    public static final int POTENTIALMATCHCOUNT = AttributesEnum.PotentialMatchCount.index();
    public static final int IMPORTFILENAME = AttributesEnum.ImportFileName.index();
    public static final int OVERWRITEAUTOGENFLAG = AttributesEnum.OverwriteAutogenFlag.index();
    public static final int TRAXIMPORTDATAPARSE = AttributesEnum.TraxImportDataParse.index();
    public static final int TRAXIMPORTPOTENTIALMATCH = AttributesEnum.TraxImportPotentialMatch.index();
    public static final int TRAXIMPORTVALIDATIONMESSAGE = AttributesEnum.TraxImportValidationMessage.index();
    public static final int TRAXIMPORTOVRDATAPARSE = AttributesEnum.TraxImportOvrDataParse.index();
    public static final int TRAXIMPORTOVRLEGACYPARSE = AttributesEnum.TraxImportOvrLegacyParse.index();
    public static final int PRMTARGETGROUP = AttributesEnum.PrmTargetGroup.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TraxImportFileImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.pq.tracs.model.eo.TraxImportFile");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for TargetGroupId, using the alias name TargetGroupId.
     * @return the TargetGroupId
     */
    public Number getTargetGroupId() {
        return (Number)getAttributeInternal(TARGETGROUPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TargetGroupId.
     * @param value value to set the TargetGroupId
     */
    public void setTargetGroupId(Number value) {
        setAttributeInternal(TARGETGROUPID, value);
    }

    /**
     * Gets the attribute value for FileName, using the alias name FileName.
     * @return the FileName
     */
    public String getFileName() {
        return (String)getAttributeInternal(FILENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for FileName.
     * @param value value to set the FileName
     */
    public void setFileName(String value) {
        setAttributeInternal(FILENAME, value);
    }

    /**
     * Gets the attribute value for ImportType, using the alias name ImportType.
     * @return the ImportType
     */
    public String getImportType() {
        return (String)getAttributeInternal(IMPORTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImportType.
     * @param value value to set the ImportType
     */
    public void setImportType(String value) {
        setAttributeInternal(IMPORTTYPE, value);
    }

    /**
     * Gets the attribute value for ImportStatus, using the alias name ImportStatus.
     * @return the ImportStatus
     */
    public String getImportStatus() {
        return (String)getAttributeInternal(IMPORTSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImportStatus.
     * @param value value to set the ImportStatus
     */
    public void setImportStatus(String value) {
        setAttributeInternal(IMPORTSTATUS, value);
    }

    /**
     * Gets the attribute value for ImportNote, using the alias name ImportNote.
     * @return the ImportNote
     */
    public String getImportNote() {
        return (String)getAttributeInternal(IMPORTNOTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImportNote.
     * @param value value to set the ImportNote
     */
    public void setImportNote(String value) {
        setAttributeInternal(IMPORTNOTE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the CreatedDate
     */
    public Date getCreatedDate() {
        return (Date)getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for ImportNumber, using the alias name ImportNumber.
     * @return the ImportNumber
     */
    public Number getImportNumber() {
        return (Number)getAttributeInternal(IMPORTNUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImportNumber.
     * @param value value to set the ImportNumber
     */
    public void setImportNumber(Number value) {
        setAttributeInternal(IMPORTNUMBER, value);
    }

    /**
     * Gets the attribute value for ParsedRowCount, using the alias name ParsedRowCount.
     * @return the ParsedRowCount
     */
    public Number getParsedRowCount() {
        return (Number)getAttributeInternal(PARSEDROWCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParsedRowCount.
     * @param value value to set the ParsedRowCount
     */
    public void setParsedRowCount(Number value) {
        setAttributeInternal(PARSEDROWCOUNT, value);
    }

    /**
     * Gets the attribute value for ParseErrorCount, using the alias name ParseErrorCount.
     * @return the ParseErrorCount
     */
    public Number getParseErrorCount() {
        return (Number)getAttributeInternal(PARSEERRORCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParseErrorCount.
     * @param value value to set the ParseErrorCount
     */
    public void setParseErrorCount(Number value) {
        setAttributeInternal(PARSEERRORCOUNT, value);
    }

    /**
     * Gets the attribute value for ValidatedRowCount, using the alias name ValidatedRowCount.
     * @return the ValidatedRowCount
     */
    public Number getValidatedRowCount() {
        return (Number)getAttributeInternal(VALIDATEDROWCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ValidatedRowCount.
     * @param value value to set the ValidatedRowCount
     */
    public void setValidatedRowCount(Number value) {
        setAttributeInternal(VALIDATEDROWCOUNT, value);
    }

    /**
     * Gets the attribute value for ValidationWarningCount, using the alias name ValidationWarningCount.
     * @return the ValidationWarningCount
     */
    public Number getValidationWarningCount() {
        return (Number)getAttributeInternal(VALIDATIONWARNINGCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ValidationWarningCount.
     * @param value value to set the ValidationWarningCount
     */
    public void setValidationWarningCount(Number value) {
        setAttributeInternal(VALIDATIONWARNINGCOUNT, value);
    }

    /**
     * Gets the attribute value for ValidationErrorCount, using the alias name ValidationErrorCount.
     * @return the ValidationErrorCount
     */
    public Number getValidationErrorCount() {
        return (Number)getAttributeInternal(VALIDATIONERRORCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ValidationErrorCount.
     * @param value value to set the ValidationErrorCount
     */
    public void setValidationErrorCount(Number value) {
        setAttributeInternal(VALIDATIONERRORCOUNT, value);
    }

    /**
     * Gets the attribute value for ImportedRowCount, using the alias name ImportedRowCount.
     * @return the ImportedRowCount
     */
    public Number getImportedRowCount() {
        return (Number)getAttributeInternal(IMPORTEDROWCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImportedRowCount.
     * @param value value to set the ImportedRowCount
     */
    public void setImportedRowCount(Number value) {
        setAttributeInternal(IMPORTEDROWCOUNT, value);
    }

    /**
     * Gets the attribute value for ImportFile, using the alias name ImportFile.
     * @return the ImportFile
     */
    public BlobDomain getImportFile() {
        return (BlobDomain)getAttributeInternal(IMPORTFILE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImportFile.
     * @param value value to set the ImportFile
     */
    public void setImportFile(BlobDomain value) {
        setAttributeInternal(IMPORTFILE, value);
    }

    /**
     * Gets the attribute value for PotentialMatchCount, using the alias name PotentialMatchCount.
     * @return the PotentialMatchCount
     */
    public Number getPotentialMatchCount() {
        return (Number)getAttributeInternal(POTENTIALMATCHCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for PotentialMatchCount.
     * @param value value to set the PotentialMatchCount
     */
    public void setPotentialMatchCount(Number value) {
        setAttributeInternal(POTENTIALMATCHCOUNT, value);
    }

    /**
     * Gets the attribute value for ImportFileName, using the alias name ImportFileName.
     * @return the ImportFileName
     */
    public String getImportFileName() {
        return (String)getAttributeInternal(IMPORTFILENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImportFileName.
     * @param value value to set the ImportFileName
     */
    public void setImportFileName(String value) {
        setAttributeInternal(IMPORTFILENAME, value);
    }

    /**
     * Gets the attribute value for OverwriteAutogenFlag, using the alias name OverwriteAutogenFlag.
     * @return the OverwriteAutogenFlag
     */
    public String getOverwriteAutogenFlag() {
        return (String)getAttributeInternal(OVERWRITEAUTOGENFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for OverwriteAutogenFlag.
     * @param value value to set the OverwriteAutogenFlag
     */
    public void setOverwriteAutogenFlag(String value) {
        setAttributeInternal(OVERWRITEAUTOGENFLAG, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxImportDataParse() {
        return (RowIterator)getAttributeInternal(TRAXIMPORTDATAPARSE);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxImportPotentialMatch() {
        return (RowIterator)getAttributeInternal(TRAXIMPORTPOTENTIALMATCH);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxImportValidationMessage() {
        return (RowIterator)getAttributeInternal(TRAXIMPORTVALIDATIONMESSAGE);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxImportOvrDataParse() {
        return (RowIterator)getAttributeInternal(TRAXIMPORTOVRDATAPARSE);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTraxImportOvrLegacyParse() {
        return (RowIterator)getAttributeInternal(TRAXIMPORTOVRLEGACYPARSE);
    }


    /**
     * @return the associated entity PrmTargetGroupImpl.
     */
    public PrmTargetGroupImpl getPrmTargetGroup() {
        return (PrmTargetGroupImpl)getAttributeInternal(PRMTARGETGROUP);
    }

    /**
     * Sets <code>value</code> as the associated entity PrmTargetGroupImpl.
     */
    public void setPrmTargetGroup(PrmTargetGroupImpl value) {
        setAttributeInternal(PRMTARGETGROUP, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }

    private void parseImportFile() {

      try {
          Integer fileIdInt = new Integer(this.getId().toString());

          String uName = this.getLoginUserId();

          DatabaseProcedure createContractFromOppProc =
              DatabaseProcedure.define("procedure pk_trax_import_parse_methods.parse_import_file" +
                                       "( p_file_id in number, p_username varchar2 )");

          DatabaseProcedure.Result result =
              createContractFromOppProc.call(this.getDBTransaction(),
                                             fileIdInt, uName);

          FacesContext.getCurrentInstance().addMessage(null,
                                                       new FacesMessage("Import File Parse Completed."));
      } catch (Exception ex) {
          ex.printStackTrace();
          this.getDBTransaction().rollback();
          FacesContext.getCurrentInstance().addMessage(null,
                                                       new FacesMessage(ex.getMessage()));
      }
  } // parseImportFile
  
  private void saveImportData() {

      try {
          Integer fileIdInt = new Integer(this.getId().toString());

          String uName = this.getLoginUserId();

          DatabaseProcedure createContractFromOppProc =
              DatabaseProcedure.define("procedure pk_trax_import_methods.save_import_data" +
                                       "( p_file_id in number, p_username varchar2 )");

          DatabaseProcedure.Result result =
              createContractFromOppProc.call(this.getDBTransaction(),
                                             fileIdInt, uName);

          FacesContext.getCurrentInstance().addMessage(null,
                                                       new FacesMessage("Import Completed."));
      } catch (Exception ex) {
          ex.printStackTrace();
          this.getDBTransaction().rollback();
          FacesContext.getCurrentInstance().addMessage(null,
                                                       new FacesMessage(ex.getMessage()));
      }
  } // saveImportData
}
