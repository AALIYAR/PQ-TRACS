package com.pq.tracs.model.eo;

import com.pq.tracs.model.bo.ContactImpl;
import com.pq.tracs.model.bo.TracsBaseEntity;

import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Dec 16 15:20:27 EST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TraxContactMethodImpl extends TracsBaseEntity {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(TraxContactMethodImpl obj) {
                return obj.getId();
            }

            public void put(TraxContactMethodImpl obj, Object value) {
                obj.setId((Number)value);
            }
        },
        ContactId {
            public Object get(TraxContactMethodImpl obj) {
                return obj.getContactId();
            }

            public void put(TraxContactMethodImpl obj, Object value) {
                obj.setContactId((Number)value);
            }
        },
        ContactMethod {
            public Object get(TraxContactMethodImpl obj) {
                return obj.getContactMethod();
            }

            public void put(TraxContactMethodImpl obj, Object value) {
                obj.setContactMethod((String)value);
            }
        },
        ContactDetail1 {
            public Object get(TraxContactMethodImpl obj) {
                return obj.getContactDetail1();
            }

            public void put(TraxContactMethodImpl obj, Object value) {
                obj.setContactDetail1((String)value);
            }
        },
        ContactDetail2 {
            public Object get(TraxContactMethodImpl obj) {
                return obj.getContactDetail2();
            }

            public void put(TraxContactMethodImpl obj, Object value) {
                obj.setContactDetail2((String)value);
            }
        },
        ContactMethodNote {
            public Object get(TraxContactMethodImpl obj) {
                return obj.getContactMethodNote();
            }

            public void put(TraxContactMethodImpl obj, Object value) {
                obj.setContactMethodNote((String)value);
            }
        },
        PrimaryFlag {
            public Object get(TraxContactMethodImpl obj) {
                return obj.getPrimaryFlag();
            }

            public void put(TraxContactMethodImpl obj, Object value) {
                obj.setPrimaryFlag((String)value);
            }
        },
        CreatedBy {
            public Object get(TraxContactMethodImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(TraxContactMethodImpl obj, Object value) {
                obj.setCreatedBy((String)value);
            }
        },
        CreatedDate {
            public Object get(TraxContactMethodImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(TraxContactMethodImpl obj, Object value) {
                obj.setCreatedDate((Date)value);
            }
        },
        LastUpdatedBy {
            public Object get(TraxContactMethodImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(TraxContactMethodImpl obj, Object value) {
                obj.setLastUpdatedBy((String)value);
            }
        },
        LastUpdatedDate {
            public Object get(TraxContactMethodImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(TraxContactMethodImpl obj, Object value) {
                obj.setLastUpdatedDate((Date)value);
            }
        },
        ContactMethodSubType {
            public Object get(TraxContactMethodImpl obj) {
                return obj.getContactMethodSubType();
            }

            public void put(TraxContactMethodImpl obj, Object value) {
                obj.setContactMethodSubType((String)value);
            }
        },
        Contact {
            public Object get(TraxContactMethodImpl obj) {
                return obj.getContact();
            }

            public void put(TraxContactMethodImpl obj, Object value) {
                obj.setContact((ContactImpl)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TraxContactMethodImpl object);

        public abstract void put(TraxContactMethodImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int CONTACTID = AttributesEnum.ContactId.index();
    public static final int CONTACTMETHOD =
        AttributesEnum.ContactMethod.index();
    public static final int CONTACTDETAIL1 =
        AttributesEnum.ContactDetail1.index();
    public static final int CONTACTDETAIL2 =
        AttributesEnum.ContactDetail2.index();
    public static final int CONTACTMETHODNOTE =
        AttributesEnum.ContactMethodNote.index();
    public static final int PRIMARYFLAG = AttributesEnum.PrimaryFlag.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY =
        AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE =
        AttributesEnum.LastUpdatedDate.index();
    public static final int CONTACTMETHODSUBTYPE =
        AttributesEnum.ContactMethodSubType.index();
    public static final int CONTACT = AttributesEnum.Contact.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TraxContactMethodImpl() {
    }


    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for ContactId, using the alias name ContactId.
     * @return the ContactId
     */
    public Number getContactId() {
        return (Number)getAttributeInternal(CONTACTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContactId.
     * @param value value to set the ContactId
     */
    public void setContactId(Number value) {
        setAttributeInternal(CONTACTID, value);
    }

    /**
     * Gets the attribute value for ContactMethod, using the alias name ContactMethod.
     * @return the ContactMethod
     */
    public String getContactMethod() {
        return (String)getAttributeInternal(CONTACTMETHOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContactMethod.
     * @param value value to set the ContactMethod
     */
    public void setContactMethod(String value) {
        setAttributeInternal(CONTACTMETHOD, value);
    }

    /**
     * Gets the attribute value for ContactDetail1, using the alias name ContactDetail1.
     * @return the ContactDetail1
     */
    public String getContactDetail1() {
        return (String)getAttributeInternal(CONTACTDETAIL1);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContactDetail1.
     * @param value value to set the ContactDetail1
     */
    public void setContactDetail1(String value) {
        setAttributeInternal(CONTACTDETAIL1, value);
    }

    /**
     * Gets the attribute value for ContactDetail2, using the alias name ContactDetail2.
     * @return the ContactDetail2
     */
    public String getContactDetail2() {
        return (String)getAttributeInternal(CONTACTDETAIL2);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContactDetail2.
     * @param value value to set the ContactDetail2
     */
    public void setContactDetail2(String value) {
        setAttributeInternal(CONTACTDETAIL2, value);
    }

    /**
     * Gets the attribute value for ContactMethodNote, using the alias name ContactMethodNote.
     * @return the ContactMethodNote
     */
    public String getContactMethodNote() {
        return (String)getAttributeInternal(CONTACTMETHODNOTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContactMethodNote.
     * @param value value to set the ContactMethodNote
     */
    public void setContactMethodNote(String value) {
        setAttributeInternal(CONTACTMETHODNOTE, value);
    }

    /**
     * Gets the attribute value for PrimaryFlag, using the alias name PrimaryFlag.
     * @return the PrimaryFlag
     */
    public String getPrimaryFlag() {
        return (String)getAttributeInternal(PRIMARYFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for PrimaryFlag.
     * @param value value to set the PrimaryFlag
     */
    public void setPrimaryFlag(String value) {
        setAttributeInternal(PRIMARYFLAG, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the CreatedDate
     */
    public Date getCreatedDate() {
        return (Date)getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for ContactMethodSubType, using the alias name ContactMethodSubType.
     * @return the ContactMethodSubType
     */
    public String getContactMethodSubType() {
        return (String)getAttributeInternal(CONTACTMETHODSUBTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContactMethodSubType.
     * @param value value to set the ContactMethodSubType
     */
    public void setContactMethodSubType(String value) {
        setAttributeInternal(CONTACTMETHODSUBTYPE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity com.pq.tracs.model.bo.ContactImpl.
     */
    public ContactImpl getContact() {
        return (ContactImpl)getAttributeInternal(CONTACT);
    }

    /**
     * Sets <code>value</code> as the associated entity com.pq.tracs.model.bo.ContactImpl.
     */
    public void setContact(ContactImpl value) {
        setAttributeInternal(CONTACT, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[] { id });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("com.pq.tracs.model.eo.TraxContactMethod");
        }
        return mDefinitionObject;
    }

    protected void prepareForDML(int operation, TransactionEvent e) {
        super.prepareForDML(operation, e);

        try {
            if (operation == DML_INSERT || operation == DML_UPDATE) {
                if (getContact().getTraxContactMethod().getRowCount() <= 1) {
                    setPrimaryFlag("Y");
                }
            }
        } catch (Exception efg) {

        }
    }

    protected void validateEntity() {
        super.validateEntity();

        if (this.getContact() != null && this.getPrimaryFlag().equalsIgnoreCase("Y")) {
            // if primary flag is set on this record, then mark the title as invalid so it will validat the primary flags
          this.getContact().setInvalid();
        }


    }
}
